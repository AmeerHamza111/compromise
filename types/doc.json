{
  "docs": [
    {
      "comment": "/** convert all text to uppercase */",
      "meta": {
        "range": [
          84,
          224
        ],
        "filename": "01-case.js",
        "lineno": 4,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000007",
          "name": "exports.toUpperCase",
          "type": "FunctionExpression",
          "paramnames": [
            "world"
          ]
        },
        "vars": {
          "this.text": null
        }
      },
      "description": "convert all text to uppercase",
      "name": "toUpperCase",
      "longname": "toUpperCase",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000003",
      "___s": true
    },
    {
      "comment": "/** convert all text to lowercase */",
      "meta": {
        "range": [
          263,
          424
        ],
        "filename": "01-case.js",
        "lineno": 11,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000036",
          "name": "exports.toLowerCase",
          "type": "FunctionExpression",
          "paramnames": [
            "world"
          ]
        },
        "vars": {
          "this.text": null
        }
      },
      "description": "convert all text to lowercase",
      "name": "toLowerCase",
      "longname": "toLowerCase",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000005",
      "___s": true
    },
    {
      "comment": "/** only set the first letter to uppercase\n * leave any existing uppercase alone\n */",
      "meta": {
        "range": [
          511,
          711
        ],
        "filename": "01-case.js",
        "lineno": 21,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000071",
          "name": "exports.toTitleCase",
          "type": "FunctionExpression",
          "paramnames": [
            "world"
          ]
        },
        "vars": {
          "this.text": null,
          "": null
        }
      },
      "description": "only set the first letter to uppercase\nleave any existing uppercase alone",
      "name": "toTitleCase",
      "longname": "toTitleCase",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000007",
      "___s": true
    },
    {
      "comment": "/** if the first letter is uppercase, and the rest are lowercase */",
      "meta": {
        "range": [
          781,
          852
        ],
        "filename": "01-case.js",
        "lineno": 28,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000107",
          "name": "exports.isTitleCase",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "if the first letter is uppercase, and the rest are lowercase",
      "name": "isTitleCase",
      "longname": "isTitleCase",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000009",
      "___s": true
    },
    {
      "comment": "/** search the term's 'post' punctuation  */",
      "meta": {
        "range": [
          111,
          183
        ],
        "filename": "02-punctuation.js",
        "lineno": 4,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000124",
          "name": "exports.hasPost",
          "type": "FunctionExpression",
          "paramnames": [
            "punct"
          ]
        }
      },
      "description": "search the term's 'post' punctuation",
      "name": "hasPost",
      "longname": "hasPost",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000010",
      "___s": true
    },
    {
      "comment": "/** does it have a comma?  */",
      "meta": {
        "range": [
          215,
          275
        ],
        "filename": "02-punctuation.js",
        "lineno": 9,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000140",
          "name": "exports.hasComma",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "does it have a comma?",
      "name": "hasComma",
      "longname": "hasComma",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000011",
      "___s": true
    },
    {
      "comment": "/** does it end in a period? */",
      "meta": {
        "range": [
          309,
          412
        ],
        "filename": "02-punctuation.js",
        "lineno": 14,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000153",
          "name": "exports.hasPeriod",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "does it end in a period?",
      "name": "hasPeriod",
      "longname": "hasPeriod",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000012",
      "___s": true
    },
    {
      "comment": "/** does it end in an exclamation */",
      "meta": {
        "range": [
          451,
          517
        ],
        "filename": "02-punctuation.js",
        "lineno": 19,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000176",
          "name": "exports.hasExclamation",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "does it end in an exclamation",
      "name": "hasExclamation",
      "longname": "hasExclamation",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000013",
      "___s": true
    },
    {
      "comment": "/** does it end with a question mark? */",
      "meta": {
        "range": [
          560,
          648
        ],
        "filename": "02-punctuation.js",
        "lineno": 24,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000189",
          "name": "exports.hasQuestionMark",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "does it end with a question mark?",
      "name": "hasQuestionMark",
      "longname": "hasQuestionMark",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000014",
      "___s": true
    },
    {
      "comment": "/** is there a ... at the end? */",
      "meta": {
        "range": [
          684,
          768
        ],
        "filename": "02-punctuation.js",
        "lineno": 29,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000208",
          "name": "exports.hasElipses",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "is there a ... at the end?",
      "name": "hasElipses",
      "longname": "hasElipses",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000015",
      "___s": true
    },
    {
      "comment": "/** is there a semicolon after this word? */",
      "meta": {
        "range": [
          815,
          879
        ],
        "filename": "02-punctuation.js",
        "lineno": 34,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000227",
          "name": "exports.hasSemicolon",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "is there a semicolon after this word?",
      "name": "hasSemicolon",
      "longname": "hasSemicolon",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000016",
      "___s": true
    },
    {
      "comment": "/** is there a slash after this word? */",
      "meta": {
        "range": [
          922,
          982
        ],
        "filename": "02-punctuation.js",
        "lineno": 39,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000240",
          "name": "exports.hasSlash",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "is there a slash after this word?",
      "name": "hasSlash",
      "longname": "hasSlash",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000017",
      "___s": true
    },
    {
      "comment": "/** is it multiple words combinded */",
      "meta": {
        "range": [
          1022,
          1093
        ],
        "filename": "02-punctuation.js",
        "lineno": 44,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000253",
          "name": "exports.hasContraction",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "is it multiple words combinded",
      "name": "hasContraction",
      "longname": "hasContraction",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000018",
      "___s": true
    },
    {
      "comment": "/** try to sensibly put this punctuation mark into the term */",
      "meta": {
        "range": [
          1158,
          1359
        ],
        "filename": "02-punctuation.js",
        "lineno": 49,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000266",
          "name": "exports.addPunctuation",
          "type": "FunctionExpression",
          "paramnames": [
            "punct"
          ]
        },
        "vars": {
          "this.post": null
        }
      },
      "description": "try to sensibly put this punctuation mark into the term",
      "name": "addPunctuation",
      "longname": "addPunctuation",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000019",
      "___s": true
    },
    {
      "comment": "/** check a match object against this term */",
      "meta": {
        "range": [
          344,
          411
        ],
        "filename": "03-misc.js",
        "lineno": 17,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000342",
          "name": "exports.doesMatch",
          "type": "FunctionExpression",
          "paramnames": [
            "reg"
          ]
        }
      },
      "description": "check a match object against this term",
      "name": "doesMatch",
      "longname": "doesMatch",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000033",
      "___s": true
    },
    {
      "comment": "/** does this term look like an acryonym? */",
      "meta": {
        "range": [
          458,
          522
        ],
        "filename": "03-misc.js",
        "lineno": 22,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000355",
          "name": "exports.isAcronym",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "does this term look like an acryonym?",
      "name": "isAcronym",
      "longname": "isAcronym",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000034",
      "___s": true
    },
    {
      "comment": "/** does the term have at least one good tag? */",
      "meta": {
        "range": [
          573,
          667
        ],
        "filename": "03-misc.js",
        "lineno": 27,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000368",
          "name": "exports.isKnown",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "does the term have at least one good tag?",
      "name": "isKnown",
      "longname": "isKnown",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000035",
      "___s": true
    },
    {
      "comment": "/** return various text formats of this term */",
      "meta": {
        "range": [
          72,
          1044
        ],
        "filename": "04-out.js",
        "lineno": 3,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000399",
          "name": "exports.textOut",
          "type": "FunctionExpression",
          "paramnames": [
            "options",
            "showPre",
            "showPost"
          ]
        },
        "vars": {
          "word": "textOut~word",
          "before": "textOut~before",
          "after": "textOut~after"
        }
      },
      "description": "return various text formats of this term",
      "name": "textOut",
      "longname": "textOut",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000037",
      "___s": true
    },
    {
      "comment": "/** return various metadata for this term */",
      "meta": {
        "range": [
          1091,
          1517
        ],
        "filename": "04-out.js",
        "lineno": 45,
        "columnno": 0,
        "path": "/Users/spencer/mountain/compromise/src/Term/methods",
        "code": {
          "id": "astnode100000593",
          "name": "exports.json",
          "type": "FunctionExpression",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "result": "json~result",
          "result.text": "json~result.text",
          "result.clean": "json~result.clean",
          "result.implicit": "json~result.implicit",
          "result.tags": "json~result.tags",
          "result.pre": "json~result.pre",
          "result.post": "json~result.post"
        }
      },
      "description": "return various metadata for this term",
      "name": "json",
      "longname": "json",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000053",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/spencer/mountain/compromise/src/Term/methods/01-case.js",
        "/Users/spencer/mountain/compromise/src/Term/methods/02-punctuation.js",
        "/Users/spencer/mountain/compromise/src/Term/methods/03-misc.js",
        "/Users/spencer/mountain/compromise/src/Term/methods/04-out.js",
        "/Users/spencer/mountain/compromise/src/Term/methods/index.js"
      ],
      "___id": "T000002R000062",
      "___s": true
    }
  ]
}