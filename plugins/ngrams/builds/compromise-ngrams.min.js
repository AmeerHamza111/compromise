"use strict";const defaults={max:4,min:1},oneSize=function(t,e){let n={};return t.forEach(t=>{for(let r=0;r<t.length;r+=1){let o=t.slice(r,r+e);if(o.length===e){let t=o.join(" ");n.hasOwnProperty(t)?n[t].count+=1:n[t]={size:e,count:1}}}}),Object.keys(n).map(t=>(n[t].normal=t,n[t]))},allGrams=function(t,e){let n=e.max||defaults.max,r=[];for(let o=e.min||defaults.min;o<=n;o++)r=r.concat(oneSize(t,o));return r};var getGrams=allGrams;const defaults$1={max:4,min:1},oneSize$1=function(t,e){let n={};return t.forEach(t=>{for(let r=0;r<t.length;r+=1){let o=t.slice(0,r);if(o.length===e){let t=o.join(" ");n.hasOwnProperty(t)?n[t].count+=1:n[t]={size:e,count:1}}}}),Object.keys(n).map(t=>(n[t].normal=t,n[t]))},startGrams=function(t,e){let n=e.max||defaults$1.max,r=[];for(let o=e.min||defaults$1.min;o<=n;o++)r=r.concat(oneSize$1(t,o));return r};var startGrams_1=startGrams;const tokenize=function(t){return t.json({terms:{clean:!0},text:!1}).map(t=>t.terms.map(t=>t.clean))};var tokenize_1=tokenize;const sort=function(t){return t=t.sort((t,e)=>t.count>e.count?-1:t.count<e.count?1:t.size>e.size?-1:t.size<e.size?1:0)};var sort_1=sort;const addMethod=function(t){t.prototype.ngrams=function(t){let e=tokenize_1(this),n=getGrams(e,t||{});return n=sort_1(n)},t.prototype.unigrams=function(t){let e=getGrams(tokenize_1(this),{max:1,min:1});return e=sort_1(e),"number"==typeof t&&(e=e[t]),e},t.prototype.bigrams=function(t){let e=getGrams(tokenize_1(this),{max:2,min:2});return e=sort_1(e),"number"==typeof t&&(e=e[t]),e},t.prototype.trigrams=function(t){let e=getGrams(tokenize_1(this),{max:3,min:3});return e=sort_1(e),"number"==typeof t&&(e=e[t]),e},t.prototype.startgrams=function(t){let e=tokenize_1(this),n=startGrams_1(e,t||{});return n=sort_1(n)}};var src=addMethod;module.exports=src;
