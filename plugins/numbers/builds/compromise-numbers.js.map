{"version":3,"file":"compromise-numbers.js","sources":["../src/find.js","../src/convert/toNumber/findModifiers.js","../src/convert/toNumber/data.js","../src/convert/toNumber/validate.js","../src/convert/toNumber/parseDecimals.js","../src/convert/toNumber/parseNumeric.js","../src/convert/toNumber/index.js","../src/parse.js","../src/convert/_toString.js","../src/convert/toText/index.js","../src/convert/toOrdinal/numOrdinal.js","../src/convert/toOrdinal/textOrdinal.js","../src/convert/_symbols.js","../src/convert/makeNumber.js","../src/methods.js","../src/tagger.js","../src/tags.js","../src/index.js"],"sourcesContent":["const tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty'\nconst teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen'\n\n// this is a bit of a mess\nconst findNumbers = function(doc, n) {\n  let match = doc.match('#Value+ #Unit?')\n\n  //\"50 83\"\n  if (match.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (match.has('#Value @hasComma #Value')) {\n      match.splitAfter('@hasComma')\n    } else {\n      match = match.splitAfter('#NumericValue')\n    }\n  }\n  //three-length\n  if (match.has('#Value #Value #Value') && !match.has('#Multiple')) {\n    //twenty-five-twenty\n    if (match.has('(' + tens + ') #Cardinal #Cardinal')) {\n      match = match.splitAfter('(' + tens + ') #Cardinal')\n    }\n  }\n\n  //two-length ones\n  if (match.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (match.has('#NumericValue #NumericValue')) {\n      match = match.splitOn('#Year')\n    }\n    //sixty fifteen\n    if (match.has('(' + tens + ') (' + teens + ')')) {\n      match = match.splitAfter('(' + tens + ')')\n    }\n    //\"72 82\"\n    let double = match.match('#Cardinal #Cardinal')\n    if (double.found && !match.has('(point|decimal)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!double.has('(' + tens + ') #Cardinal') && !double.has('#Multiple #Value')) {\n          // double = double.firstTerm()\n          double.terms().forEach(d => {\n            match = match.splitOn(d)\n          })\n        }\n      }\n    }\n    //seventh fifth\n    if (match.match('#Ordinal #Ordinal').match('#TextValue').found && !match.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!match.has('(' + tens + ') #Ordinal')) {\n        match = match.splitAfter('#Ordinal')\n      }\n    }\n    //fifth five\n    if (match.has('#Ordinal #Cardinal')) {\n      match = match.splitBefore('#Cardinal+')\n    }\n    //five 2017 (support '5 hundred', and 'twenty 5'\n    if (match.has('#TextValue #NumericValue') && !match.has('(' + tens + '|#Multiple)')) {\n      match = match.splitBefore('#NumericValue+')\n    }\n  }\n  //5-8\n  if (match.has('#NumberRange')) {\n    match = match.splitAfter('#NumberRange')\n  }\n  //grab (n)th result\n  if (typeof n === 'number') {\n    match = match.get(n)\n  }\n  return match\n}\nmodule.exports = findNumbers\n","//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\nconst findModifiers = str => {\n  const mults = [\n    {\n      reg: /^(minus|negative)[\\s\\-]/i,\n      mult: -1,\n    },\n    {\n      reg: /^(a\\s)?half[\\s\\-](of\\s)?/i,\n      mult: 0.5,\n    },\n    //  {\n    //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n    //   mult: 0.25\n    // }\n  ]\n  for (let i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, ''),\n      }\n    }\n  }\n  return {\n    amount: 1,\n    str: str,\n  }\n}\n\nmodule.exports = findModifiers\n","module.exports = {\n  ones: {\n    zeroth: 0,\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  },\n  teens: {\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19,\n  },\n  tens: {\n    twentieth: 20,\n    thirtieth: 30,\n    fortieth: 40,\n    fourtieth: 40,\n    fiftieth: 50,\n    sixtieth: 60,\n    seventieth: 70,\n    eightieth: 80,\n    ninetieth: 90,\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fourty: 40,\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90,\n  },\n  multiples: {\n    hundredth: 100,\n    thousandth: 1000,\n    millionth: 1e6,\n    billionth: 1e9,\n    trillionth: 1e12,\n    quadrillionth: 1e15,\n    quintillionth: 1e18,\n    sextillionth: 1e21,\n    septillionth: 1e24,\n    hundred: 100,\n    thousand: 1000,\n    million: 1e6,\n    billion: 1e9,\n    trillion: 1e12,\n    quadrillion: 1e15,\n    quintillion: 1e18,\n    sextillion: 1e21,\n    septillion: 1e24,\n    grand: 1000,\n  },\n}\n","const words = require('./data')\n\n//prevent things like 'fifteen ten', and 'five sixty'\nconst isValid = (w, has) => {\n  if (words.ones.hasOwnProperty(w)) {\n    if (has.ones || has.teens) {\n      return false\n    }\n  } else if (words.teens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  } else if (words.tens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  }\n  return true\n}\nmodule.exports = isValid\n","const words = require('./data')\n\n//concatenate into a string with leading '0.'\nconst parseDecimals = function(arr) {\n  let str = '0.'\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr[i]\n    if (words.ones.hasOwnProperty(w) === true) {\n      str += words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      str += words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      str += words.tens[w]\n    } else if (/^[0-9]$/.test(w) === true) {\n      str += w\n    } else {\n      return 0\n    }\n  }\n  return parseFloat(str)\n}\n\nmodule.exports = parseDecimals\n","//parse a string like \"4,200.1\" into Number 4200.1\nconst parseNumeric = str => {\n  //remove ordinal - 'th/rd'\n  str = str.replace(/1st$/, '1')\n  str = str.replace(/2nd$/, '2')\n  str = str.replace(/3rd$/, '3')\n  str = str.replace(/([4567890])r?th$/, '$1')\n  //remove prefixes\n  str = str.replace(/^[$€¥£¢]/, '')\n  //remove suffixes\n  str = str.replace(/[%$€¥£¢]$/, '')\n  //remove commas\n  str = str.replace(/,/g, '')\n  //split '5kg' from '5'\n  str = str.replace(/([0-9])([a-z\\u00C0-\\u00FF]{1,2})$/, '$1')\n  return str\n}\n\nmodule.exports = parseNumeric\n","const findModifiers = require('./findModifiers')\nconst words = require('./data')\nconst isValid = require('./validate')\nconst parseDecimals = require('./parseDecimals')\nconst parseNumeric = require('./parseNumeric')\nconst improperFraction = /^([0-9,\\. ]+)\\/([0-9,\\. ]+)$/\n\n//some numbers we know\nconst casualForms = {\n  // 'a few': 3,\n  'a couple': 2,\n  'a dozen': 12,\n  'two dozen': 24,\n  zero: 0,\n}\n\n// a 'section' is something like 'fifty-nine thousand'\n// turn a section into something we can add to - like 59000\nconst section_sum = obj => {\n  return Object.keys(obj).reduce((sum, k) => {\n    sum += obj[k]\n    return sum\n  }, 0)\n}\n\n//turn a string into a number\nconst parse = function(str) {\n  //convert some known-numbers\n  if (casualForms.hasOwnProperty(str) === true) {\n    return casualForms[str]\n  }\n  //'a/an' is 1\n  if (str === 'a' || str === 'an') {\n    return 1\n  }\n  const modifier = findModifiers(str)\n  str = modifier.str\n  let last_mult = null\n  let has = {}\n  let sum = 0\n  let isNegative = false\n  const terms = str.split(/[ -]/)\n  for (let i = 0; i < terms.length; i++) {\n    let w = terms[i]\n    w = parseNumeric(w)\n    if (!w || w === 'and') {\n      continue\n    }\n    if (w === '-' || w === 'negative') {\n      isNegative = true\n      continue\n    }\n    if (w.charAt(0) === '-') {\n      isNegative = true\n      w = w.substr(1)\n    }\n    //decimal mode\n    if (w === 'point') {\n      sum += section_sum(has)\n      sum += parseDecimals(terms.slice(i + 1, terms.length))\n      sum *= modifier.amount\n      return sum\n    }\n    //improper fraction\n    const fm = w.match(improperFraction)\n    if (fm) {\n      const num = parseFloat(fm[1].replace(/[, ]/g, ''))\n      const denom = parseFloat(fm[2].replace(/[, ]/g, ''))\n      if (denom) {\n        sum += num / denom || 0\n      }\n      continue\n    }\n    //prevent mismatched units, like 'seven eleven'\n    if (isValid(w, has) === false) {\n      return null\n    }\n    //buildOut section, collect 'has' values\n    if (/^[0-9\\.]+$/.test(w)) {\n      has['ones'] = parseFloat(w) //not technically right\n    } else if (words.ones.hasOwnProperty(w) === true) {\n      has['ones'] = words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      has['teens'] = words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      has['tens'] = words.tens[w]\n    } else if (words.multiples.hasOwnProperty(w) === true) {\n      let mult = words.multiples[w]\n\n      //something has gone wrong : 'two hundred five hundred'\n      if (mult === last_mult) {\n        return null\n      }\n      //support 'hundred thousand'\n      //this one is tricky..\n      if (mult === 100 && terms[i + 1] !== undefined) {\n        // has['hundreds']=\n        const w2 = terms[i + 1]\n        if (words.multiples[w2]) {\n          mult *= words.multiples[w2] //hundredThousand/hundredMillion\n          i += 1\n        }\n      }\n      //natural order of things\n      //five thousand, one hundred..\n      if (last_mult === null || mult < last_mult) {\n        sum += (section_sum(has) || 1) * mult\n        last_mult = mult\n        has = {}\n      } else {\n        //maybe hundred .. thousand\n        sum += section_sum(has)\n        last_mult = mult\n        sum = (sum || 1) * mult\n        has = {}\n      }\n    }\n  }\n  //dump the remaining has values\n  sum += section_sum(has)\n  //post-process add modifier\n  sum *= modifier.amount\n  sum *= isNegative ? -1 : 1\n  //dont return 0, if it went straight-through\n  if (sum === 0 && Object.keys(has).length === 0) {\n    return null\n  }\n  return sum\n}\n\nmodule.exports = parse\n","const toNumber = require('./convert/toNumber')\n\n// get a numeric value from this phrase\nconst parseNumber = function(p) {\n  let str = p.text('reduced')\n  // is it in '3,123' format?\n  let hasComma = /[0-9],[0-9]/.test(p.text('text'))\n  str = str.replace(/,/g, '')\n\n  //parse a numeric-number (easy)\n  let arr = str.split(/^([^0-9]*)([0-9.,]*)([^0-9]*)$/)\n  if (arr && arr[2] && p.terms().length < 2) {\n    let num = parseFloat(arr[2] || str)\n    //ensure that num is an actual number\n    if (typeof num !== 'number') {\n      num = null\n    }\n    // strip an ordinal off the suffix\n    let suffix = arr[3] || ''\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = ''\n    }\n    // support M for million, k for thousand\n    if (suffix === 'm' || suffix === 'M') {\n      num *= 1000000\n      suffix = ''\n    }\n    if (suffix === 'k' || suffix === 'k') {\n      num *= 1000\n      suffix = ''\n    }\n    return {\n      hasComma: hasComma,\n      prefix: arr[1] || '',\n      num: num,\n      suffix: suffix,\n    }\n  }\n  //parse a text-numer (harder)\n  let num = toNumber(str)\n  return {\n    hasComma: hasComma,\n    prefix: '',\n    num: num,\n    suffix: '',\n  }\n}\nmodule.exports = parseNumber\n","/**\n * turn big numbers, like 2.3e+22, into a string with a ton of trailing 0's\n * */\nconst numToString = function(n) {\n  if (n < 1000000) {\n    return String(n)\n  }\n  let str\n  if (typeof n === 'number') {\n    str = n.toFixed(0)\n  } else {\n    str = n\n  }\n  if (str.indexOf('e+') === -1) {\n    return str\n  }\n  return str\n    .replace('.', '')\n    .split('e+')\n    .reduce(function(p, b) {\n      return p + Array(b - p.length + 2).join(0)\n    })\n}\nmodule.exports = numToString\n// console.log(numToString(2.5e+22));\n","const toString = require('../_toString')\n/**\n * turns an integer/float into.ber, like 'fifty-five'\n */\n\nconst tens_mapping = [\n  ['ninety', 90],\n  ['eighty', 80],\n  ['seventy', 70],\n  ['sixty', 60],\n  ['fifty', 50],\n  ['forty', 40],\n  ['thirty', 30],\n  ['twenty', 20],\n]\nconst ones_mapping = [\n  '',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n  'fifteen',\n  'sixteen',\n  'seventeen',\n  'eighteen',\n  'nineteen',\n]\n\nconst sequence = [\n  [1e24, 'septillion'],\n  [1e20, 'hundred sextillion'],\n  [1e21, 'sextillion'],\n  [1e20, 'hundred quintillion'],\n  [1e18, 'quintillion'],\n  [1e17, 'hundred quadrillion'],\n  [1e15, 'quadrillion'],\n  [1e14, 'hundred trillion'],\n  [1e12, 'trillion'],\n  [1e11, 'hundred billion'],\n  [1e9, 'billion'],\n  [1e8, 'hundred million'],\n  [1e6, 'million'],\n  [100000, 'hundred thousand'],\n  [1000, 'thousand'],\n  [100, 'hundred'],\n  [1, 'one'],\n]\n\n//turn number into an array of magnitudes, like [[5, million], [2, hundred]]\nconst breakdown_magnitudes = function(num) {\n  let working = num\n  let have = []\n  sequence.forEach(a => {\n    if (num >= a[0]) {\n      let howmany = Math.floor(working / a[0])\n      working -= howmany * a[0]\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany,\n        })\n      }\n    }\n  })\n  return have\n}\n\n//turn numbers from 100-0 into their text\nconst breakdown_hundred = function(num) {\n  let arr = []\n  if (num > 100) {\n    return arr //something bad happened..\n  }\n  for (let i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1]\n      arr.push(tens_mapping[i][0])\n    }\n  }\n  //(hopefully) we should only have 20-0 now\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num])\n  }\n  return arr\n}\n\n/** print-out 'point eight nine'*/\nconst handle_decimal = num => {\n  const names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  let arr = []\n  //parse it out like a string, because js math is such shit\n  let str = toString(num)\n  let decimal = str.match(/\\.([0-9]+)/)\n  if (!decimal || !decimal[0]) {\n    return arr\n  }\n  arr.push('point')\n  let decimals = decimal[0].split('')\n  for (let i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]])\n  }\n  return arr\n}\n\n/** turns an integer into a textual number */\nconst to_text = function(num) {\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    num = toString(num)\n  }\n  let arr = []\n  //handle negative numbers\n  if (num < 0) {\n    arr.push('negative')\n    num = Math.abs(num)\n  }\n  //break-down into units, counts\n  let units = breakdown_magnitudes(num)\n  //build-up the string from its components\n  for (let i = 0; i < units.length; i++) {\n    let unit_name = units[i].unit\n    if (unit_name === 'one') {\n      unit_name = ''\n      //put an 'and' in here\n      if (arr.length > 1) {\n        arr.push('and')\n      }\n    }\n    arr = arr.concat(breakdown_hundred(units[i].count))\n    arr.push(unit_name)\n  }\n  //also support decimals - 'point eight'\n  arr = arr.concat(handle_decimal(num))\n  //remove empties\n  arr = arr.filter(s => s)\n  if (arr.length === 0) {\n    arr[0] = ''\n  }\n  return arr.join(' ')\n}\n\nmodule.exports = to_text\n\n// console.log(to_text(-1000.8));\n","const toString = require('../_toString')\n\n/**\n * turn a number like 5 into an ordinal like 5th\n */\nconst numOrdinal = function(num) {\n  if (!num && num !== 0) {\n    return null\n  }\n  //the teens are all 'th'\n  let tens = num % 100\n  if (tens > 10 && tens < 20) {\n    return String(num) + 'th'\n  }\n  //the rest of 'em\n  const mapping = {\n    0: 'th',\n    1: 'st',\n    2: 'nd',\n    3: 'rd',\n  }\n  let str = toString(num)\n  let last = str.slice(str.length - 1, str.length)\n  if (mapping[last]) {\n    str += mapping[last]\n  } else {\n    str += 'th'\n  }\n  return str\n}\n\nmodule.exports = numOrdinal\n","const textValue = require('../toText')\n// const toString = require('../_toString')\n\nconst irregulars = {\n  one: 'first',\n  two: 'second',\n  three: 'third',\n  five: 'fifth',\n  eight: 'eighth',\n  nine: 'ninth',\n  twelve: 'twelfth',\n  twenty: 'twentieth',\n  thirty: 'thirtieth',\n  forty: 'fortieth',\n  fourty: 'fourtieth',\n  fifty: 'fiftieth',\n  sixty: 'sixtieth',\n  seventy: 'seventieth',\n  eighty: 'eightieth',\n  ninety: 'ninetieth',\n}\n\n/**\n * convert a javascript number to 'twentieth' format\n * */\nconst textOrdinal = num => {\n  let words = textValue(num).split(' ')\n  //convert the last number to an ordinal\n  let last = words[words.length - 1]\n  if (irregulars.hasOwnProperty(last)) {\n    words[words.length - 1] = irregulars[last]\n  } else {\n    words[words.length - 1] = last.replace(/y$/, 'i') + 'th'\n  }\n  return words.join(' ')\n}\n\nmodule.exports = textOrdinal\n","const prefixes = {\n  '¢': 'cents',\n  $: 'dollars',\n  '£': 'pounds',\n  '¥': 'yen',\n  '€': 'euros',\n  '₡': 'colón',\n  '฿': 'baht',\n  '₭': 'kip',\n  '₩': 'won',\n  '₹': 'rupees',\n  '₽': 'ruble',\n  '₺': 'liras',\n}\nconst suffixes = {\n  '%': 'percent',\n  s: 'seconds',\n  cm: 'centimetres',\n  km: 'kilometres',\n}\nmodule.exports = {\n  prefixes: prefixes,\n  suffixes: suffixes,\n}\n","const toString = require('./_toString')\nconst toText = require('./toText')\nconst numOrdinal = require('./toOrdinal/numOrdinal')\nconst textOrdinal = require('./toOrdinal/textOrdinal')\nconst symbols = require('./_symbols')\nconst prefixes = symbols.prefixes\nconst suffixes = symbols.suffixes\n\nconst isCurrency = {\n  usd: true,\n  eur: true,\n  jpy: true,\n  gbp: true,\n  cad: true,\n  aud: true,\n  chf: true,\n  cny: true,\n  hkd: true,\n  nzd: true,\n  kr: true,\n  rub: true,\n}\n// convert $ to 'dollars', etc\nconst prefixToText = function(obj) {\n  // turn 5% to 'five percent'\n  if (prefixes.hasOwnProperty(obj.prefix)) {\n    obj.suffix += prefixes[obj.prefix]\n    obj.prefix = ''\n  }\n  //turn 5km to 'five kilometres'\n  if (suffixes.hasOwnProperty(obj.suffix)) {\n    obj.suffix = suffixes[obj.suffix]\n  }\n  //uppercase lost case for 'USD', etc\n  if (isCurrency.hasOwnProperty(obj.suffix)) {\n    obj.suffix = obj.suffix.toUpperCase()\n  }\n  // add a space, if it exists\n  if (obj.suffix) {\n    obj.suffix = ' ' + obj.suffix\n  }\n  return obj\n}\n\n//business-logic for converting a cardinal-number to other forms\nconst makeNumber = function(obj, isText, isOrdinal) {\n  let num = String(obj.num)\n  if (isText) {\n    obj = prefixToText(obj)\n    if (isOrdinal) {\n      //ordinal-text\n      num = textOrdinal(num)\n      return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n    }\n    //cardinal-text\n    num = toText(num)\n    return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n  }\n  //ordinal-number\n  if (isOrdinal) {\n    num = numOrdinal(num)\n    // support '5th percent'\n    obj = prefixToText(obj)\n    return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n  }\n  // support comma format\n  if (obj.hasComma === true) {\n    num = obj.num.toLocaleString()\n  }\n  // cardinal-number\n  num = toString(num) // support very large numbers\n  return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n}\nmodule.exports = makeNumber\n","const parseNumber = require('./parse')\nconst makeNumber = require('./convert/makeNumber')\n\nlet methods = {\n  /** overloaded json method with additional number information */\n  json: function(options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach(doc => {\n      let json = doc.json(options)[0]\n      let obj = parseNumber(doc)\n      json.prefix = obj.prefix\n      json.number = obj.num\n      json.suffix = obj.suffix\n      json.cardinal = makeNumber(obj, false, false)\n      json.ordinal = makeNumber(obj, false, true)\n      json.textCardinal = makeNumber(obj, true, false)\n      json.textOrdinal = makeNumber(obj, true, true)\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n]\n    }\n    return res\n  },\n  /** return only ordinal numbers */\n  isOrdinal: function() {\n    return this.if('#Ordinal')\n  },\n  /** return only cardinal numbers*/\n  isCardinal: function() {\n    return this.if('#Cardinal')\n  },\n  /** convert to numeric form like '8' or '8th' */\n  toNumber: function() {\n    this.forEach(val => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, false, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n      val.tag('NumericValue')\n    })\n    return this\n  },\n  /** add commas, or nicer formatting for numbers */\n  toLocaleString: function() {\n    this.forEach(val => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      obj.num = obj.num.toLocaleString()\n      let str = makeNumber(obj, false, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n    })\n    return this\n  },\n  /** convert to text form - like 'eight' or 'eigth'*/\n  toText: function() {\n    this.forEach(val => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, true, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n      val.tag('TextValue')\n    })\n    return this\n  },\n  /** convert to cardinal form, like 'eight', or '8' */\n  toCardinal: function() {\n    let m = this.if('#Ordinal')\n    m.forEach(val => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), false)\n      val.replaceWith(str, true)\n      val.tag('Cardinal')\n    })\n    return this\n  },\n  /** convert to ordinal form, like 'eighth', or '8th' */\n  toOrdinal: function() {\n    let m = this.if('#Cardinal')\n    m.forEach(val => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), true)\n      val.replaceWith(str, true)\n      val.tag('Ordinal')\n    })\n    return this\n  },\n  /** return only numbers that are == n */\n  isEqual: function(n) {\n    return this.filter(val => {\n      let num = parseNumber(val).num\n      return num === n\n    })\n  },\n  /** return only numbers that are > n*/\n  greaterThan: function(n) {\n    return this.filter(val => {\n      let num = parseNumber(val).num\n      return num > n\n    })\n  },\n  /** return only numbers that are < n*/\n  lessThan: function(n) {\n    return this.filter(val => {\n      let num = parseNumber(val).num\n      return num < n\n    })\n  },\n  /** return only numbers > min and < max */\n  between: function(min, max) {\n    return this.filter(val => {\n      let num = parseNumber(val).num\n      return num > min && num < max\n    })\n  },\n  /** increase each number by n */\n  add: function(n) {\n    if (!n) {\n      return this // don't bother\n    }\n    this.forEach(val => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      obj.num += n\n      let str = makeNumber(obj, val.has('#TextValue'), val.has('#Ordinal'))\n      val.replaceWith(str, true)\n    })\n    return this\n  },\n  /** decrease each number by n*/\n  subtract: function(n) {\n    return this.add(n * -1)\n  },\n  /** increase each number by 1 */\n  increment: function() {\n    this.add(1)\n    return this\n  },\n  /** decrease each number by 1 */\n  decrement: function() {\n    this.add(-1)\n    return this\n  },\n\n  /// ----\n\n  /** return things like 1/3rd */\n  fractions: function(n) {\n    let m = this.match('#Fraction')\n    if (typeof n === 'number') {\n      m = m.get(n)\n    }\n    return m\n  },\n\n  /** return things like CCXX*/\n  romanNumerals: function(n) {\n    let m = this.match('#RomanNumeral').numbers()\n    if (typeof n === 'number') {\n      m = m.get(n)\n    }\n    return m\n  },\n\n  /** return things like $4.50*/\n  money: function(n) {\n    let m = this.splitOn('@hasComma')\n    m = m.match('#Money+ #Currency?')\n    m = m.numbers()\n    if (typeof n === 'number') {\n      m = m.get(n)\n    }\n    return m\n  },\n}\n// aliases\nmethods.toNice = methods.toLocaleString\nmethods.isBetween = methods.between\nmethods.minus = methods.subtract\nmethods.plus = methods.add\nmethods.equals = methods.isEqual\n\nmodule.exports = methods\n","const multiples =\n  '(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)'\n\n// improved tagging for numbers\nconst tagger = function(doc) {\n  doc.match(multiples).tag('#Multiple')\n  //  in the 400s\n  doc.match('the [/[0-9]+s$/]').tag('#Plural')\n  //half a million\n  doc.match('half a? #Value').tag('Value', 'half-a-value') //(quarter not ready)\n  //five and a half\n  doc.match('#Value and a (half|quarter)').tag('Value', 'value-and-a-half')\n  //one hundred and seven dollars\n  doc.match('#Money and #Money #Currency?').tag('Money', 'money-and-money')\n}\nmodule.exports = tagger\n","module.exports = {\n  Fraction: {\n    isA: 'Value',\n  },\n  Multiple: {\n    isA: 'Value',\n  },\n  Unit: {\n    isA: 'Value',\n  },\n}\n","const findNumbers = require('./find')\nconst methods = require('./methods')\nconst tagger = require('./tagger')\nconst tags = require('./tags')\n\n/** adds .numbers() method */\nconst addMethod = function(Doc, world) {\n  // add tags to our tagset\n  world.addTags(tags)\n\n  // additional tagging before running the number-parser\n  world.postProcess(tagger)\n\n  /** a list of number values, and their units */\n  class Numbers extends Doc {}\n  //aliases\n  Object.assign(Numbers.prototype, methods)\n\n  /** find all numbers and values */\n  Doc.prototype.numbers = function(n) {\n    let match = findNumbers(this, n)\n    return new Numbers(match.list, this, this.world)\n  }\n  // alias for reverse-compatibility\n  Doc.prototype.values = Doc.prototype.numbers\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["tens","teens","findNumbers","doc","n","match","has","splitAfter","splitOn","double","found","terms","forEach","d","splitBefore","get","findModifiers","str","mults","reg","mult","i","length","test","amount","replace","ones","zeroth","first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","zero","one","two","three","four","five","six","seven","eight","nine","tenth","eleventh","twelfth","thirteenth","fourteenth","fifteenth","sixteenth","seventeenth","eighteenth","nineteenth","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twentieth","thirtieth","fortieth","fourtieth","fiftieth","sixtieth","seventieth","eightieth","ninetieth","twenty","thirty","forty","fourty","fifty","sixty","seventy","eighty","ninety","multiples","hundredth","thousandth","millionth","billionth","trillionth","quadrillionth","quintillionth","sextillionth","septillionth","hundred","thousand","million","billion","trillion","quadrillion","quintillion","sextillion","septillion","grand","isValid","w","words","hasOwnProperty","parseDecimals","arr","parseFloat","parseNumeric","improperFraction","casualForms","section_sum","obj","Object","keys","reduce","sum","k","parse","modifier","last_mult","isNegative","split","charAt","substr","slice","fm","num","denom","undefined","w2","parseNumber","p","text","hasComma","suffix","prefix","toNumber","numToString","String","toFixed","indexOf","b","Array","join","tens_mapping","ones_mapping","sequence","breakdown_magnitudes","working","have","a","howmany","Math","floor","push","unit","count","breakdown_hundred","handle_decimal","names","toString","decimal","decimals","to_text","abs","units","unit_name","concat","filter","s","numOrdinal","mapping","last","irregulars","textOrdinal","textValue","prefixes","$","suffixes","cm","km","symbols","isCurrency","usd","eur","jpy","gbp","cad","aud","chf","cny","hkd","nzd","kr","rub","prefixToText","toUpperCase","makeNumber","isText","isOrdinal","toText","toLocaleString","methods","json","options","normal","trim","res","number","cardinal","ordinal","textCardinal","isCardinal","val","replaceWith","tag","toCardinal","m","toOrdinal","isEqual","greaterThan","lessThan","between","min","max","add","subtract","increment","decrement","fractions","romanNumerals","numbers","money","toNice","isBetween","minus","plus","equals","tagger","Fraction","isA","Multiple","Unit","addMethod","Doc","world","addTags","tags","postProcess","Numbers","assign","prototype","list","values"],"mappings":"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"}