{"version":3,"file":"compromise-verbs.js","sources":["../src/parse.js","../src/tense/toInfinitive/index.js","../src/plural/isPlural.js","../src/tense/conjugate/toBe.js","../src/tense/conjugate/index.js","../src/negative/toNegative.js","../src/negative/methods.js","../src/plural/methods.js","../src/tense/methods.js","../src/index.js"],"sourcesContent":["// turn 'would not really walk up' into parts\nconst parseVerb = function(vb) {\n  let parsed = {\n    adverb: vb.match('#Adverb+'), // 'really'\n    negative: vb.match('#Negative'), // 'not'\n    auxiliary: vb.match('#Auxiliary').not('(#Negative|#Adverb)'), // 'will' of 'will go'\n    particle: vb.match('#Particle'), // 'up' of 'pull up'\n    verb: vb.match('#Verb').not('(#Adverb|#Negative|#Auxiliary|#Particle)'),\n  }\n  return parsed\n}\nmodule.exports = parseVerb\n","// walked => walk  - turn a verb into it's root form\nconst toInfinitive = function(parsed, world) {\n  let verb = parsed.verb\n\n  //1. if it's already infinitive\n  let str = verb.out('normal')\n  if (verb.has('#Infinitive')) {\n    return str\n  }\n\n  // 2. world transform does the heavy-lifting\n  let tense = null\n  if (verb.has('#PastTense')) {\n    tense = 'PastTense'\n  } else if (verb.has('#Gerund')) {\n    tense = 'Gerund'\n  } else if (verb.has('#PresentTense')) {\n    tense = 'PresentTense'\n  } else if (verb.has('#Participle')) {\n    tense = 'Participle'\n  } else if (verb.has('#Actor')) {\n    tense = 'Actor'\n  }\n  return world.transforms.toInfinitive(str, world, tense)\n}\nmodule.exports = toInfinitive\n","// spencer walks -> singular\n// we walk -> plural\n\n// the most-recent noun-phrase, before this verb.\nconst findNoun = function(vb) {\n  let noun = vb.lookBehind('#Noun+').last()\n  return noun\n}\n\n//sometimes you can tell if a verb is plural/singular, just by the verb\n// i am / we were\n// othertimes you need its subject 'we walk' vs 'i walk'\nconst isPlural = function(parsed) {\n  let vb = parsed.verb\n  if (vb.has('(are|were|does)') || parsed.auxiliary.has('(are|were|does)')) {\n    return true\n  }\n  if (vb.has('(is|am|do|was)') || parsed.auxiliary.has('(is|am|do|was)')) {\n    return false\n  }\n  //consider its prior noun\n  let noun = findNoun(vb)\n  if (noun.has('(we|they|you)')) {\n    return true\n  }\n  if (noun.has('#Plural')) {\n    return true\n  }\n  if (noun.has('#Singular')) {\n    return false\n  }\n  return null\n}\nmodule.exports = isPlural\n","const isPlural = require('../../plural/isPlural')\n\n/** too many special cases for is/was/will be*/\nconst toBe = parsed => {\n  let isI = false\n  let plural = isPlural(parsed)\n  let isNegative = parsed.negative.found\n  //account for 'i is' -> 'i am' irregular\n  // if (vb.parent && vb.parent.has('i #Adverb? #Copula')) {\n  //   isI = true;\n  // }\n\n  let obj = {\n    PastTense: 'was',\n    PresentTense: 'is',\n    FutureTense: 'will be',\n    Infinitive: 'is',\n    Gerund: 'being',\n    Actor: '',\n    PerfectTense: 'been',\n    Pluperfect: 'been',\n  }\n  //\"i is\" -> \"i am\"\n  if (isI === true) {\n    obj.PresentTense = 'am'\n    obj.Infinitive = 'am'\n  }\n  if (plural) {\n    obj.PastTense = 'were'\n    obj.PresentTense = 'are'\n    obj.Infinitive = 'are'\n  }\n  if (isNegative) {\n    obj.PastTense += ' not'\n    obj.PresentTense += ' not'\n    obj.FutureTense = 'will not be'\n    obj.Infinitive += ' not'\n    obj.PerfectTense = 'not ' + obj.PerfectTense\n    obj.Pluperfect = 'not ' + obj.Pluperfect\n    obj.Gerund = 'not ' + obj.Gerund\n  }\n  return obj\n}\nmodule.exports = toBe\n","const toInfinitive = require('../toInfinitive')\nconst toBe = require('./toBe')\n\nconst conjugate = function(parsed, world) {\n  let verb = parsed.verb\n\n  //special handling of 'is', 'will be', etc.\n  if (verb.has('#Copula') || (verb.out('normal') === 'be' && parsed.auxiliary.has('will'))) {\n    return toBe(parsed, world)\n  }\n\n  let infinitive = toInfinitive(parsed, world)\n  // console.log(infinitive)\n  let forms = world.transforms.conjugate(infinitive, world)\n  forms.Infinitive = infinitive\n\n  //apply negative\n  const isNegative = parsed.negative.found\n  if (isNegative) {\n    forms.PastTense = 'did not ' + forms.Infinitive\n    forms.PresentTense = 'does not ' + forms.Infinitive\n    forms.Gerund = 'not ' + forms.Gerund\n  }\n  //future Tense is pretty straightforward\n  if (!forms.FutureTense) {\n    if (isNegative) {\n      forms.FutureTense = 'will not ' + forms.Infinitive\n    } else {\n      forms.FutureTense = 'will ' + forms.Infinitive\n    }\n  }\n  if (isNegative) {\n    forms.Infinitive = 'not ' + forms.Infinitive\n  }\n  return forms\n}\nmodule.exports = conjugate\n","const toInfinitive = require('../tense/toInfinitive')\nconst isPlural = require('../plural/isPlural')\n// #Modal : would walk    -> 'would not walk'\n// #Copula : is           -> 'is not'\n// #PastTense : walked    -> did not walk\n// #PresentTense : walks  -> does not walk\n// #Gerund : walking:     -> not walking\n// #Infinitive : walk     -> do not walk\n\nconst toNegative = function(parsed, world) {\n  let vb = parsed.verb\n  // if it's already negative...\n  if (parsed.negative.found) {\n    return\n  }\n\n  // would walk -> would not walk\n  if (parsed.auxiliary.found) {\n    parsed.auxiliary.eq(0).append('not')\n    return\n  }\n  // is walking -> is not walking\n  if (vb.has('(#Copula|will|has|had|do)')) {\n    vb.append('not')\n    return\n  }\n  // walked -> did not walk\n  if (vb.has('#PastTense')) {\n    let inf = toInfinitive(parsed, world)\n    vb.replace(inf)\n    vb.prepend('did not')\n    return\n  }\n  // walks -> does not walk\n  if (vb.has('#PresentTense')) {\n    let inf = toInfinitive(parsed, world)\n    vb.replace(inf)\n    if (isPlural(parsed, world)) {\n      vb.prepend('do not')\n    } else {\n      vb.prepend('does not')\n    }\n    return\n  }\n  //walking -> not walking\n  if (vb.has('#Gerund')) {\n    let inf = toInfinitive(parsed, world)\n    vb.replace(inf)\n    vb.prepend('not')\n    return\n  }\n\n  //fallback 1:  walk -> does not walk\n  if (isPlural(parsed, world)) {\n    vb.prepend('does not')\n    return\n  }\n  //fallback 2:  walk -> do not walk\n  vb.prepend('do not')\n  return\n}\nmodule.exports = toNegative\n","const toNegative = require('./toNegative')\nconst parseVerb = require('../parse')\n\n/** return only verbs with 'not'*/\nexports.isNegative = function() {\n  return this.if('#Negative')\n}\n\n/**  return only verbs without 'not'*/\nexports.isPositive = function() {\n  return this.ifNo('#Negative')\n}\n\n/** add a 'not' to these verbs */\nexports.toNegative = function() {\n  this.list.forEach(p => {\n    let doc = this.buildFrom([p])\n    let parsed = parseVerb(doc)\n    toNegative(parsed, doc.world)\n  })\n  return this\n}\n\n/** remove 'not' from these verbs */\nexports.toPositive = function() {\n  return this.remove('#Negative')\n}\n","const parseVerb = require('../parse')\nconst isPlural = require('./isPlural')\n\n/** */\nexports.isPlural = function() {\n  let list = []\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    if (isPlural(parsed, this.world) === true) {\n      list.push(vb.list[0])\n    }\n  })\n  return this.buildFrom(list)\n}\n/** */\nexports.isSingular = function() {\n  let list = []\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    if (isPlural(parsed, this.world) === false) {\n      list.push(vb.list[0])\n    }\n  })\n  return this.buildFrom(list)\n}\n","const parseVerb = require('../parse')\nconst conjugate = require('./conjugate')\nconst toInfinitive = require('./toInfinitive')\n\n/**  */\n// exports.tenses = function() {\n// }\n//\n\n/**  */\nexports.conjugate = function() {\n  let result = []\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    let forms = conjugate(parsed, this.world)\n    result.push(forms)\n  })\n  return result\n}\n/** */\nexports.toPastTense = function() {\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    let str = conjugate(parsed, this.world).PastTense\n    vb.replace(str)\n  })\n  return this\n}\n/** */\nexports.toPresentTense = function() {\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    let str = conjugate(parsed, this.world).PresentTense\n    vb.replace(str)\n  })\n  return this\n}\n/** */\nexports.toFutureTense = function() {\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    let inf = toInfinitive(parsed, this.world)\n    vb.replace('will ' + inf) //not smart.\n  })\n  return this\n}\n/** */\nexports.toInfinitive = function() {\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    let inf = toInfinitive(parsed, this.world)\n    vb.replace(inf)\n  })\n  return this\n}\n/** */\nexports.toGerund = function() {\n  this.forEach(vb => {\n    let parsed = parseVerb(vb)\n    let str = conjugate(parsed, this.world).Gerund\n    vb.replace(str)\n  })\n  return this\n}\n/** */\n// exports.asAdjective=function(){}\n","const parseVerb = require('./parse')\nconst conjugations = require('./tense/conjugate')\n\nconst methods = [\n  require('./negative/methods'),\n  require('./plural/methods'),\n  require('./tense/methods'),\n]\n\nconst addMethod = function(Doc) {\n  /**  */\n  class Verbs extends Doc {\n    constructor(list, from, world) {\n      super(list, from, world)\n    }\n\n    /** overload the original json with verb information */\n    json(options) {\n      let n = null\n      if (typeof options === 'number') {\n        n = options\n        options = null\n      }\n      options = options || { text: true, normal: true, trim: true, terms: true }\n      let res = []\n      this.forEach(p => {\n        let json = p.json(options)[0]\n        let parsed = parseVerb(p)\n        json.parts = {}\n        Object.keys(parsed).forEach(k => {\n          json.parts[k] = parsed[k].text('normal')\n        })\n        json.isNegative = p.has('#Negative')\n        json.conjugations = conjugations(parsed, this.world)\n        res.push(json)\n      })\n      if (n !== null) {\n        return res[n]\n      }\n      return res\n    }\n\n    /** grab the adverbs describing these verbs */\n    adverbs() {\n      let list = []\n      this.forEach(vb => {\n        let advb = parseVerb(vb).adverb\n        if (advb.found) {\n          list = list.concat(advb.list)\n        }\n      })\n      return this.buildFrom(list)\n    }\n  }\n\n  // add-in our methods\n  methods.forEach(obj => Object.assign(Verbs.prototype, obj))\n\n  // aliases\n  Verbs.prototype.negate = Verbs.prototype.toNegative\n\n  Doc.prototype.verbs = function(n) {\n    let match = this.match('(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+')\n    // handle commas\n    match = match.splitAfter('@hasComma')\n    // match = match.clauses()\n    //handle slashes?\n    // match = match.splitAfter('@hasSlash')\n    //ensure there's actually a verb\n    match = match.if('#Verb') //this could be smarter\n    //grab (n)th result\n    if (typeof n === 'number') {\n      match = match.get(n)\n    }\n    let vb = new Verbs(match.list, this, this.world)\n    // this.before(match).debug()\n    return vb\n  }\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["parseVerb","vb","parsed","adverb","match","negative","auxiliary","not","particle","verb","toInfinitive","world","str","out","has","tense","transforms","findNoun","noun","lookBehind","last","isPlural","toBe","plural","isNegative","found","obj","PastTense","PresentTense","FutureTense","Infinitive","Gerund","Actor","PerfectTense","Pluperfect","conjugate","infinitive","forms","toNegative","eq","append","inf","replace","prepend","ifNo","list","forEach","p","doc","buildFrom","remove","push","result","methods","require$$0","require$$1","require$$2","addMethod","Doc","Verbs","from","options","n","text","normal","trim","terms","res","json","parts","Object","keys","k","conjugations","advb","concat","assign","prototype","negate","verbs","splitAfter","get"],"mappings":"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"}