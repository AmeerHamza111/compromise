{"version":3,"file":"compromise-verbs.js","sources":["../src/toInfinitive/_rules.js","../src/toInfinitive/_guess.js","../src/toInfinitive/pickTense.js","../src/toInfinitive/index.js","../src/conjugate/toBe.js","../src/conjugate/index.js","../src/toNegative/index.js","../src/index.js"],"sourcesContent":["//rules for turning a verb into infinitive form\nlet rules = {\n  Participle: [\n    {\n      reg: /own$/i,\n      to: 'ow',\n    },\n    {\n      reg: /(.)un([g|k])$/i,\n      to: '$1in$2',\n    },\n  ],\n\n  Actor: [\n    {\n      reg: /(er)er$/i,\n      to: '$1',\n    },\n  ],\n\n  PresentTense: [\n    {\n      reg: /(..)(ies)$/i,\n      to: '$1y',\n    },\n    {\n      reg: /(tch|sh)es$/i,\n      to: '$1',\n    },\n    {\n      reg: /(ss|zz)es$/i,\n      to: '$1',\n    },\n    {\n      reg: /([tzlshicgrvdnkmu])es$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,\n      to: '$1',\n    },\n    {\n      reg: /(ow)s$/i,\n      to: '$1',\n    },\n    {\n      reg: /(op)s$/i,\n      to: '$1',\n    },\n    {\n      reg: /([eirs])ts$/i,\n      to: '$1t',\n    },\n    {\n      reg: /(ll)s$/i,\n      to: '$1',\n    },\n    {\n      reg: /(el)s$/i,\n      to: '$1',\n    },\n    {\n      reg: /(ip)es$/i,\n      to: '$1e',\n    },\n    {\n      reg: /ss$/i,\n      to: 'ss',\n    },\n    {\n      reg: /s$/i,\n      to: '',\n    },\n  ],\n\n  Gerund: [\n    {\n      reg: /pping$/i,\n      to: 'p',\n    },\n    {\n      reg: /lling$/i,\n      to: 'll',\n    },\n    {\n      reg: /tting$/i,\n      to: 't',\n    },\n    {\n      reg: /dding$/i,\n      to: 'd',\n    },\n    {\n      reg: /ssing$/i,\n      to: 'ss',\n    },\n    {\n      reg: /(..)gging$/i,\n      to: '$1g',\n    },\n    {\n      reg: /([^aeiou])ying$/i,\n      to: '$1y',\n    },\n    {\n      reg: /([^ae]i.)ing$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(ea.)ing$/i,\n      to: '$1',\n    },\n    {\n      reg: /(u[rtcb]|[bdtpkg]l|n[cg]|a[gdkvtc]|[ua]s|[dr]g|yz|o[rlsp]|cre)ing$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(ch|sh)ing$/i,\n      to: '$1',\n    },\n    {\n      reg: /(..)ing$/i,\n      to: '$1',\n    },\n  ],\n\n  PastTense: [\n    {\n      reg: /(ued)$/i,\n      to: 'ue',\n    },\n    {\n      reg: /a([^aeiouy])ed$/i,\n      to: 'a$1e',\n    },\n    {\n      reg: /([aeiou]zz)ed$/i,\n      to: '$1',\n    },\n    {\n      reg: /(e|i)lled$/i,\n      to: '$1ll',\n    },\n    {\n      reg: /(.)(sh|ch)ed$/i,\n      to: '$1$2',\n    },\n    {\n      reg: /(tl|gl)ed$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(um?pt?)ed$/i,\n      to: '$1',\n    },\n    {\n      reg: /(ss)ed$/i,\n      to: '$1',\n    },\n    {\n      reg: /pped$/i,\n      to: 'p',\n    },\n    {\n      reg: /tted$/i,\n      to: 't',\n    },\n    {\n      reg: /(..)gged$/i,\n      to: '$1g',\n    },\n    {\n      reg: /(..)lked$/i,\n      to: '$1lk',\n    },\n    {\n      reg: /([^aeiouy][aeiou])ked$/i,\n      to: '$1ke',\n    },\n    {\n      reg: /(.[aeiou])led$/i,\n      to: '$1l',\n    },\n    {\n      reg: /(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,\n      to: '$1$2',\n    },\n    {\n      reg: /(.ut)ed$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(.pt)ed$/i,\n      to: '$1',\n    },\n    {\n      reg: /(us)ed$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(..[^aeiouy])ed$/i,\n      to: '$1e',\n    },\n    {\n      reg: /(..)ied$/i,\n      to: '$1y',\n    },\n    {\n      reg: /(.o)ed$/i,\n      to: '$1o',\n    },\n    {\n      reg: /(..i)ed$/i,\n      to: '$1',\n    },\n    {\n      reg: /(.a[^aeiou])ed$/i,\n      to: '$1',\n    },\n    {\n      reg: /([rl])ew$/i,\n      to: '$1ow',\n    },\n    {\n      reg: /([pl])t$/i,\n      to: '$1t',\n    },\n  ],\n}\nmodule.exports = rules\n","let guessVerb = {\n  Gerund: ['ing'],\n  Actor: ['erer'],\n  Infinitive: [\n    'ate',\n    'ize',\n    'tion',\n    'rify',\n    'then',\n    'ress',\n    'ify',\n    'age',\n    'nce',\n    'ect',\n    'ise',\n    'ine',\n    'ish',\n    'ace',\n    'ash',\n    'ure',\n    'tch',\n    'end',\n    'ack',\n    'and',\n    'ute',\n    'ade',\n    'ock',\n    'ite',\n    'ase',\n    'ose',\n    'use',\n    'ive',\n    'int',\n    'nge',\n    'lay',\n    'est',\n    'ain',\n    'ant',\n    'ent',\n    'eed',\n    'er',\n    'le',\n    'own',\n    'unk',\n    'ung',\n    'en',\n  ],\n  PastTense: ['ed', 'lt', 'nt', 'pt', 'ew', 'ld'],\n  PresentTense: [\n    'rks',\n    'cks',\n    'nks',\n    'ngs',\n    'mps',\n    'tes',\n    'zes',\n    'ers',\n    'les',\n    'acks',\n    'ends',\n    'ands',\n    'ocks',\n    'lays',\n    'eads',\n    'lls',\n    'els',\n    'ils',\n    'ows',\n    'nds',\n    'ays',\n    'ams',\n    'ars',\n    'ops',\n    'ffs',\n    'als',\n    'urs',\n    'lds',\n    'ews',\n    'ips',\n    'es',\n    'ts',\n    'ns',\n  ],\n}\n//flip it into a lookup object\nguessVerb = Object.keys(guessVerb).reduce((h, k) => {\n  guessVerb[k].forEach(a => (h[a] = k))\n  return h\n}, {})\nmodule.exports = guessVerb\n","const guessVerb = require('./_guess')\n\n/** it helps to know what we're conjugating from */\nconst pickTense = function(verb) {\n  // 1. decide from known-tags\n  if (verb.has('#PastTense')) {\n    return 'PastTense'\n  } else if (verb.has('#Gerund')) {\n    return 'Gerund'\n  } else if (verb.has('#PresentTense')) {\n    return 'PresentTense'\n  } else if (verb.has('#Participle')) {\n    return 'Participle'\n  } else if (verb.has('#Actor')) {\n    return 'Actor'\n  }\n  // 2. guess a little-bit\n  let str = verb.out('normal')\n  let three = str.substr(str.length - 3)\n  if (guessVerb.hasOwnProperty(three) === true) {\n    return guessVerb[three]\n  }\n  let two = str.substr(str.length - 2)\n  if (guessVerb.hasOwnProperty(two === true)) {\n    return guessVerb[two]\n  }\n  let one = str.substr(str.length - 1)\n  if (one === 's') {\n    return 'PresentTense'\n  }\n  return null\n}\nmodule.exports = pickTense\n","const rules = require('./_rules')\nconst fromTense = require('./pickTense')\n\nconst toInfinitive = function(parsed, world) {\n  let verb = parsed.verb\n\n  //1. if it's already infinitive\n  let str = verb.out('normal')\n  if (verb.has('#Infinitive')) {\n    return str\n  }\n  //2. look at known irregulars\n  if (world.lexicon.hasOwnProperty(str) === true) {\n    let irregs = world.irregulars.verbs\n    let keys = Object.keys(irregs)\n    for (let i = 0; i < keys.length; i++) {\n      let forms = Object.keys(irregs[keys[i]])\n      for (let o = 0; o < forms.length; o++) {\n        if (str === irregs[keys[i]][forms[o]]) {\n          return keys[i]\n        }\n      }\n    }\n  }\n  //3. look at our rules\n  let tense = fromTense(verb)\n  if (tense && rules[tense]) {\n    for (let i = 0; i < rules[tense].length; i++) {\n      const rule = rules[tense][i]\n      if (rule.reg.test(str) === true) {\n        return str.replace(rule.reg, rule.to)\n      }\n    }\n  }\n  // fallback\n  return str\n}\nmodule.exports = toInfinitive\n","'use strict'\n/** too many special cases for is/was/will be*/\nconst toBe = parsed => {\n  let isI = false\n  let isPlural = false\n  let isNegative = parsed.negative.found\n  //account for 'i is' -> 'i am' irregular\n  // if (vb.parent && vb.parent.has('i #Adverb? #Copula')) {\n  //   isI = true;\n  // }\n\n  let obj = {\n    PastTense: 'was',\n    PresentTense: 'is',\n    FutureTense: 'will be',\n    Infinitive: 'is',\n    Gerund: 'being',\n    Actor: '',\n    PerfectTense: 'been',\n    Pluperfect: 'been',\n  }\n  //\"i is\" -> \"i am\"\n  if (isI === true) {\n    obj.PresentTense = 'am'\n    obj.Infinitive = 'am'\n  }\n  if (isPlural) {\n    obj.PastTense = 'were'\n    obj.PresentTense = 'are'\n    obj.Infinitive = 'are'\n  }\n  if (isNegative) {\n    obj.PastTense += ' not'\n    obj.PresentTense += ' not'\n    obj.FutureTense = 'will not be'\n    obj.Infinitive += ' not'\n    obj.PerfectTense = 'not ' + obj.PerfectTense\n    obj.Pluperfect = 'not ' + obj.Pluperfect\n    obj.Gerund = 'not ' + obj.Gerund\n  }\n  return obj\n}\nmodule.exports = toBe\n","const toInfinitive = require('../toInfinitive')\nconst toBe = require('./toBe')\n\nconst conjugate = function(parsed, world) {\n  let verb = parsed.verb\n\n  //special handling of 'is', 'will be', etc.\n  if (verb.has('#Copula') || (verb.out('normal') === 'be' && parsed.auxiliary.has('will'))) {\n    return toBe(parsed, world)\n  }\n\n  let infinitive = toInfinitive(parsed, world)\n  let forms = world.transforms.verbs(infinitive, world)\n  forms.Infinitive = infinitive\n\n  //apply negative\n  const isNegative = parsed.negative.found\n  if (isNegative) {\n    forms.PastTense = 'did not ' + forms.Infinitive\n    forms.PresentTense = 'does not ' + forms.Infinitive\n    forms.Gerund = 'not ' + forms.Gerund\n  }\n  //future Tense is pretty straightforward\n  if (!forms.FutureTense) {\n    if (isNegative) {\n      forms.FutureTense = 'will not ' + forms.Infinitive\n    } else {\n      forms.FutureTense = 'will ' + forms.Infinitive\n    }\n  }\n  if (isNegative) {\n    forms.Infinitive = 'not ' + forms.Infinitive\n  }\n  return forms\n}\nmodule.exports = conjugate\n","// #Modal : would walk    -> 'would not walk'\n// #Copula : is           -> 'is not'\n// #PastTense : walked    -> did not walk\n// #PresentTense : walks  -> does not walk\n// #Gerund : walking:     -> not walking\n// #Infinitive : walk     -> do not walk\n\nconst toNegative = function(parsed, world) {\n  // if it's already negative...\n  if (parsed.negative.found) {\n    return\n  }\n\n  // would walk -> would not walk\n  if (parsed.auxiliary.found) {\n    parsed.auxiliary.append('not')\n    return\n  }\n  // is walking -> is not walking\n  if (parsed.verb.has('#Copula')) {\n    parsed.verb.append('not')\n    return\n  }\n}\nmodule.exports = toNegative\n","const conjugate = require('./conjugate')\nconst toNegative = require('./toNegative')\n\n// turn 'would not really walk up' into parts\nconst parseVerb = function(vb) {\n  return {\n    adverb: vb.match('#Adverb+'), // 'really'\n    negative: vb.match('#Negative'), // 'not'\n    auxiliary: vb.match('#Auxiliary'), // 'will' of 'will go'\n    particle: vb.match('#Particle'), // 'up' of 'pull up'\n    verb: vb.match('#Verb').not('(#Adverb|#Negative|#Auxiliary|#Particle)'),\n  }\n}\n\nconst addMethod = function(Doc) {\n  /**  */\n  class Verbs extends Doc {\n    constructor(list, from, world) {\n      super(list, from, world)\n    }\n\n    /** grab the adverbs describing these verbs */\n    adverbs() {\n      let list = []\n      this.forEach(vb => {\n        let advb = parseVerb(vb).adverb\n        if (advb.found) {\n          list = list.concat(advb.list)\n        }\n      })\n      return this.buildFrom(list)\n    }\n    /** */\n    // conjugation(){}\n    /** */\n    conjugations() {\n      let result = []\n      this.forEach(vb => {\n        let parsed = parseVerb(vb)\n        let forms = conjugate(parsed, this.world)\n        result.push(forms)\n      })\n      return result\n    }\n    /** */\n    // isPlural(){}\n    /** */\n    // isSingular(){}\n\n    /** return only verbs with 'not'*/\n    isNegative() {\n      return this.if('#Negative')\n    }\n    /**  return only verbs without 'not'*/\n    isPositive() {\n      return this.ifNo('#Negative')\n    }\n    /** add a 'not' to these verbs */\n    toNegative() {\n      // not native forEach!\n      this.list.forEach(p => {\n        let doc = this.buildFrom([p])\n        let parsed = parseVerb(doc)\n        toNegative(parsed, doc.world)\n      })\n      return this\n    }\n    /** remove 'not' from these verbs */\n    toPositive() {\n      return this.remove('#Negative')\n    }\n    /** */\n    toPastTense() {\n      let transforms = this.world.transforms\n      return this.map(vb => {\n        let verb = parseVerb(vb).verb\n        let str = verb.out('normal')\n        let past = transforms.verbs(str).PastTense\n        if (past) {\n          let p = vb.list[0]\n          // console.log(p.buildFrom)\n          // let p = vb.buildP\n          // console.log(vb.list[0].replace(past))\n          return vb //.replaceWith(past, this)\n        }\n        return vb\n      })\n    }\n    /** */\n    // toPresentTense(){}\n    /** */\n    // toFutureTense(){}\n    /** */\n    // toInfinitive(){}\n    /** */\n    // toGerund(){}\n    /** */\n    // asAdjective(){}\n  }\n\n  Doc.prototype.verbs = function(n) {\n    let match = this.match('(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+')\n    // handle commas\n    // match = match.splitAfter('!#Adverb @hasComma')\n    //handle slashes?\n    // match = match.splitAfter('@hasSlash')\n    //ensure there's actually a verb\n    match = match.if('#Verb') //this could be smarter\n    //grab (n)th result\n    if (typeof n === 'number') {\n      match = match.get(n)\n    }\n    let vb = new Verbs(match.list, this, this.world)\n    return vb\n  }\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["rules","Participle","reg","to","Actor","PresentTense","Gerund","PastTense","guessVerb","Infinitive","Object","keys","reduce","h","k","forEach","a","pickTense","verb","has","str","out","three","substr","length","hasOwnProperty","two","one","toInfinitive","parsed","world","lexicon","irregs","irregulars","verbs","i","forms","o","tense","fromTense","rule","test","replace","toBe","isNegative","negative","found","obj","FutureTense","PerfectTense","Pluperfect","conjugate","auxiliary","infinitive","transforms","toNegative","append","parseVerb","vb","adverb","match","particle","not","addMethod","Doc","Verbs","list","from","advb","concat","buildFrom","result","push","ifNo","p","doc","remove","map","past","prototype","n","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA,IAAIA,KAAK,GAAG;EACVC,EAAAA,UAAU,EAAE,CACV;EACEC,IAAAA,GAAG,EAAE,OADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GADU,EAKV;EACED,IAAAA,GAAG,EAAE,gBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GALU,CADF;EAYVC,EAAAA,KAAK,EAAE,CACL;EACEF,IAAAA,GAAG,EAAE,UADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GADK,CAZG;EAmBVE,EAAAA,YAAY,EAAE,CACZ;EACEH,IAAAA,GAAG,EAAE,aADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GADY,EAKZ;EACED,IAAAA,GAAG,EAAE,cADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GALY,EASZ;EACED,IAAAA,GAAG,EAAE,aADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GATY,EAaZ;EACED,IAAAA,GAAG,EAAE,yBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAbY,EAiBZ;EACED,IAAAA,GAAG,EAAE,0CADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjBY,EAqBZ;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArBY,EAyBZ;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzBY,EA6BZ;EACED,IAAAA,GAAG,EAAE,cADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7BY,EAiCZ;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjCY,EAqCZ;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArCY,EAyCZ;EACED,IAAAA,GAAG,EAAE,UADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzCY,EA6CZ;EACED,IAAAA,GAAG,EAAE,MADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7CY,EAiDZ;EACED,IAAAA,GAAG,EAAE,KADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjDY,CAnBJ;EA0EVG,EAAAA,MAAM,EAAE,CACN;EACEJ,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GADM,EAKN;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GALM,EASN;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GATM,EAaN;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAbM,EAiBN;EACED,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjBM,EAqBN;EACED,IAAAA,GAAG,EAAE,aADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArBM,EAyBN;EACED,IAAAA,GAAG,EAAE,kBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzBM,EA6BN;EACED,IAAAA,GAAG,EAAE,gBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7BM,EAiCN;EACED,IAAAA,GAAG,EAAE,YADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjCM,EAqCN;EACED,IAAAA,GAAG,EAAE,qEADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArCM,EAyCN;EACED,IAAAA,GAAG,EAAE,cADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzCM,EA6CN;EACED,IAAAA,GAAG,EAAE,WADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7CM,CA1EE;EA6HVI,EAAAA,SAAS,EAAE,CACT;EACEL,IAAAA,GAAG,EAAE,SADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GADS,EAKT;EACED,IAAAA,GAAG,EAAE,kBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GALS,EAST;EACED,IAAAA,GAAG,EAAE,iBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GATS,EAaT;EACED,IAAAA,GAAG,EAAE,aADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAbS,EAiBT;EACED,IAAAA,GAAG,EAAE,gBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjBS,EAqBT;EACED,IAAAA,GAAG,EAAE,aADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArBS,EAyBT;EACED,IAAAA,GAAG,EAAE,cADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzBS,EA6BT;EACED,IAAAA,GAAG,EAAE,UADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7BS,EAiCT;EACED,IAAAA,GAAG,EAAE,QADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjCS,EAqCT;EACED,IAAAA,GAAG,EAAE,QADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArCS,EAyCT;EACED,IAAAA,GAAG,EAAE,YADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzCS,EA6CT;EACED,IAAAA,GAAG,EAAE,YADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7CS,EAiDT;EACED,IAAAA,GAAG,EAAE,yBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjDS,EAqDT;EACED,IAAAA,GAAG,EAAE,iBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArDS,EAyDT;EACED,IAAAA,GAAG,EAAE,wFADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzDS,EA6DT;EACED,IAAAA,GAAG,EAAE,WADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7DS,EAiET;EACED,IAAAA,GAAG,EAAE,WADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjES,EAqET;EACED,IAAAA,GAAG,EAAE,UADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArES,EAyET;EACED,IAAAA,GAAG,EAAE,mBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzES,EA6ET;EACED,IAAAA,GAAG,EAAE,WADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7ES,EAiFT;EACED,IAAAA,GAAG,EAAE,UADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjFS,EAqFT;EACED,IAAAA,GAAG,EAAE,WADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GArFS,EAyFT;EACED,IAAAA,GAAG,EAAE,kBADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAzFS,EA6FT;EACED,IAAAA,GAAG,EAAE,YADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GA7FS,EAiGT;EACED,IAAAA,GAAG,EAAE,WADP;EAEEC,IAAAA,EAAE,EAAE;EAFN,GAjGS;EA7HD,CAAZ;EAoOA,UAAc,GAAGH,KAAjB;;ECrOA,IAAIQ,SAAS,GAAG;EACdF,EAAAA,MAAM,EAAE,CAAC,KAAD,CADM;EAEdF,EAAAA,KAAK,EAAE,CAAC,MAAD,CAFO;EAGdK,EAAAA,UAAU,EAAE,CACV,KADU,EAEV,KAFU,EAGV,MAHU,EAIV,MAJU,EAKV,MALU,EAMV,MANU,EAOV,KAPU,EAQV,KARU,EASV,KATU,EAUV,KAVU,EAWV,KAXU,EAYV,KAZU,EAaV,KAbU,EAcV,KAdU,EAeV,KAfU,EAgBV,KAhBU,EAiBV,KAjBU,EAkBV,KAlBU,EAmBV,KAnBU,EAoBV,KApBU,EAqBV,KArBU,EAsBV,KAtBU,EAuBV,KAvBU,EAwBV,KAxBU,EAyBV,KAzBU,EA0BV,KA1BU,EA2BV,KA3BU,EA4BV,KA5BU,EA6BV,KA7BU,EA8BV,KA9BU,EA+BV,KA/BU,EAgCV,KAhCU,EAiCV,KAjCU,EAkCV,KAlCU,EAmCV,KAnCU,EAoCV,KApCU,EAqCV,IArCU,EAsCV,IAtCU,EAuCV,KAvCU,EAwCV,KAxCU,EAyCV,KAzCU,EA0CV,IA1CU,CAHE;EA+CdF,EAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CA/CG;EAgDdF,EAAAA,YAAY,EAAE,CACZ,KADY,EAEZ,KAFY,EAGZ,KAHY,EAIZ,KAJY,EAKZ,KALY,EAMZ,KANY,EAOZ,KAPY,EAQZ,KARY,EASZ,KATY,EAUZ,MAVY,EAWZ,MAXY,EAYZ,MAZY,EAaZ,MAbY,EAcZ,MAdY,EAeZ,MAfY,EAgBZ,KAhBY,EAiBZ,KAjBY,EAkBZ,KAlBY,EAmBZ,KAnBY,EAoBZ,KApBY,EAqBZ,KArBY,EAsBZ,KAtBY,EAuBZ,KAvBY,EAwBZ,KAxBY,EAyBZ,KAzBY,EA0BZ,KA1BY,EA2BZ,KA3BY,EA4BZ,KA5BY,EA6BZ,KA7BY,EA8BZ,KA9BY,EA+BZ,IA/BY,EAgCZ,IAhCY,EAiCZ,IAjCY;EAhDA,CAAhB;;EAqFAG,SAAS,GAAGE,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,MAAvB,CAA8B,UAACC,CAAD,EAAIC,CAAJ,EAAU;EAClDN,EAAAA,SAAS,CAACM,CAAD,CAAT,CAAaC,OAAb,CAAqB,UAAAC,CAAC;EAAA,WAAKH,CAAC,CAACG,CAAD,CAAD,GAAOF,CAAZ;EAAA,GAAtB;EACA,SAAOD,CAAP;EACD,CAHW,EAGT,EAHS,CAAZ;EAIA,UAAc,GAAGL,SAAjB;;ECvFA;;EACA,IAAMS,SAAS,GAAG,SAAZA,SAAY,CAASC,IAAT,EAAe;;EAE/B,MAAIA,IAAI,CAACC,GAAL,CAAS,YAAT,CAAJ,EAA4B;EAC1B,WAAO,WAAP;EACD,GAFD,MAEO,IAAID,IAAI,CAACC,GAAL,CAAS,SAAT,CAAJ,EAAyB;EAC9B,WAAO,QAAP;EACD,GAFM,MAEA,IAAID,IAAI,CAACC,GAAL,CAAS,eAAT,CAAJ,EAA+B;EACpC,WAAO,cAAP;EACD,GAFM,MAEA,IAAID,IAAI,CAACC,GAAL,CAAS,aAAT,CAAJ,EAA6B;EAClC,WAAO,YAAP;EACD,GAFM,MAEA,IAAID,IAAI,CAACC,GAAL,CAAS,QAAT,CAAJ,EAAwB;EAC7B,WAAO,OAAP;EACD,GAZ8B;;;EAc/B,MAAIC,GAAG,GAAGF,IAAI,CAACG,GAAL,CAAS,QAAT,CAAV;EACA,MAAIC,KAAK,GAAGF,GAAG,CAACG,MAAJ,CAAWH,GAAG,CAACI,MAAJ,GAAa,CAAxB,CAAZ;;EACA,MAAIhB,MAAS,CAACiB,cAAV,CAAyBH,KAAzB,MAAoC,IAAxC,EAA8C;EAC5C,WAAOd,MAAS,CAACc,KAAD,CAAhB;EACD;;EACD,MAAII,GAAG,GAAGN,GAAG,CAACG,MAAJ,CAAWH,GAAG,CAACI,MAAJ,GAAa,CAAxB,CAAV;;EACA,MAAIhB,MAAS,CAACiB,cAAV,CAAyBC,GAAG,KAAK,IAAjC,CAAJ,EAA4C;EAC1C,WAAOlB,MAAS,CAACkB,GAAD,CAAhB;EACD;;EACD,MAAIC,GAAG,GAAGP,GAAG,CAACG,MAAJ,CAAWH,GAAG,CAACI,MAAJ,GAAa,CAAxB,CAAV;;EACA,MAAIG,GAAG,KAAK,GAAZ,EAAiB;EACf,WAAO,cAAP;EACD;;EACD,SAAO,IAAP;EACD,CA5BD;;EA6BA,eAAc,GAAGV,SAAjB;;EC7BA,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAASC,MAAT,EAAiBC,KAAjB,EAAwB;EAC3C,MAAIZ,IAAI,GAAGW,MAAM,CAACX,IAAlB,CAD2C;;EAI3C,MAAIE,GAAG,GAAGF,IAAI,CAACG,GAAL,CAAS,QAAT,CAAV;;EACA,MAAIH,IAAI,CAACC,GAAL,CAAS,aAAT,CAAJ,EAA6B;EAC3B,WAAOC,GAAP;EACD,GAP0C;;;EAS3C,MAAIU,KAAK,CAACC,OAAN,CAAcN,cAAd,CAA6BL,GAA7B,MAAsC,IAA1C,EAAgD;EAC9C,QAAIY,MAAM,GAAGF,KAAK,CAACG,UAAN,CAAiBC,KAA9B;EACA,QAAIvB,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYqB,MAAZ,CAAX;;EACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,IAAI,CAACa,MAAzB,EAAiCW,CAAC,EAAlC,EAAsC;EACpC,UAAIC,KAAK,GAAG1B,MAAM,CAACC,IAAP,CAAYqB,MAAM,CAACrB,IAAI,CAACwB,CAAD,CAAL,CAAlB,CAAZ;;EACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACZ,MAA1B,EAAkCa,CAAC,EAAnC,EAAuC;EACrC,YAAIjB,GAAG,KAAKY,MAAM,CAACrB,IAAI,CAACwB,CAAD,CAAL,CAAN,CAAgBC,KAAK,CAACC,CAAD,CAArB,CAAZ,EAAuC;EACrC,iBAAO1B,IAAI,CAACwB,CAAD,CAAX;EACD;EACF;EACF;EACF,GApB0C;;;EAsB3C,MAAIG,KAAK,GAAGC,WAAS,CAACrB,IAAD,CAArB;;EACA,MAAIoB,KAAK,IAAItC,MAAK,CAACsC,KAAD,CAAlB,EAA2B;EACzB,SAAK,IAAIH,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGnC,MAAK,CAACsC,KAAD,CAAL,CAAad,MAAjC,EAAyCW,EAAC,EAA1C,EAA8C;EAC5C,UAAMK,IAAI,GAAGxC,MAAK,CAACsC,KAAD,CAAL,CAAaH,EAAb,CAAb;;EACA,UAAIK,IAAI,CAACtC,GAAL,CAASuC,IAAT,CAAcrB,GAAd,MAAuB,IAA3B,EAAiC;EAC/B,eAAOA,GAAG,CAACsB,OAAJ,CAAYF,IAAI,CAACtC,GAAjB,EAAsBsC,IAAI,CAACrC,EAA3B,CAAP;EACD;EACF;EACF,GA9B0C;;;EAgC3C,SAAOiB,GAAP;EACD,CAjCD;;EAkCA,kBAAc,GAAGQ,YAAjB;;;;ECnCA,IAAMe,IAAI,GAAG,SAAPA,IAAO,CAAAd,MAAM,EAAI;AACrB,EAEA,MAAIe,UAAU,GAAGf,MAAM,CAACgB,QAAP,CAAgBC,KAAjC,CAHqB;;;;;EASrB,MAAIC,GAAG,GAAG;EACRxC,IAAAA,SAAS,EAAE,KADH;EAERF,IAAAA,YAAY,EAAE,IAFN;EAGR2C,IAAAA,WAAW,EAAE,SAHL;EAIRvC,IAAAA,UAAU,EAAE,IAJJ;EAKRH,IAAAA,MAAM,EAAE,OALA;EAMRF,IAAAA,KAAK,EAAE,EANC;EAOR6C,IAAAA,YAAY,EAAE,MAPN;EAQRC,IAAAA,UAAU,EAAE;EARJ,GAAV,CATqB;;EA6BrB,MAAIN,UAAJ,EAAgB;EACdG,IAAAA,GAAG,CAACxC,SAAJ,IAAiB,MAAjB;EACAwC,IAAAA,GAAG,CAAC1C,YAAJ,IAAoB,MAApB;EACA0C,IAAAA,GAAG,CAACC,WAAJ,GAAkB,aAAlB;EACAD,IAAAA,GAAG,CAACtC,UAAJ,IAAkB,MAAlB;EACAsC,IAAAA,GAAG,CAACE,YAAJ,GAAmB,SAASF,GAAG,CAACE,YAAhC;EACAF,IAAAA,GAAG,CAACG,UAAJ,GAAiB,SAASH,GAAG,CAACG,UAA9B;EACAH,IAAAA,GAAG,CAACzC,MAAJ,GAAa,SAASyC,GAAG,CAACzC,MAA1B;EACD;;EACD,SAAOyC,GAAP;EACD,CAvCD;;EAwCA,UAAc,GAAGJ,IAAjB;;ECvCA,IAAMQ,SAAS,GAAG,SAAZA,SAAY,CAAStB,MAAT,EAAiBC,KAAjB,EAAwB;EACxC,MAAIZ,IAAI,GAAGW,MAAM,CAACX,IAAlB,CADwC;;EAIxC,MAAIA,IAAI,CAACC,GAAL,CAAS,SAAT,KAAwBD,IAAI,CAACG,GAAL,CAAS,QAAT,MAAuB,IAAvB,IAA+BQ,MAAM,CAACuB,SAAP,CAAiBjC,GAAjB,CAAqB,MAArB,CAA3D,EAA0F;EACxF,WAAOwB,MAAI,CAACd,MAAD,AAAA,CAAX;EACD;;EAED,MAAIwB,UAAU,GAAGzB,cAAY,CAACC,MAAD,EAASC,KAAT,CAA7B;EACA,MAAIM,KAAK,GAAGN,KAAK,CAACwB,UAAN,CAAiBpB,KAAjB,CAAuBmB,UAAvB,EAAmCvB,KAAnC,CAAZ;EACAM,EAAAA,KAAK,CAAC3B,UAAN,GAAmB4C,UAAnB,CAVwC;;EAaxC,MAAMT,UAAU,GAAGf,MAAM,CAACgB,QAAP,CAAgBC,KAAnC;;EACA,MAAIF,UAAJ,EAAgB;EACdR,IAAAA,KAAK,CAAC7B,SAAN,GAAkB,aAAa6B,KAAK,CAAC3B,UAArC;EACA2B,IAAAA,KAAK,CAAC/B,YAAN,GAAqB,cAAc+B,KAAK,CAAC3B,UAAzC;EACA2B,IAAAA,KAAK,CAAC9B,MAAN,GAAe,SAAS8B,KAAK,CAAC9B,MAA9B;EACD,GAlBuC;;;EAoBxC,MAAI,CAAC8B,KAAK,CAACY,WAAX,EAAwB;EACtB,QAAIJ,UAAJ,EAAgB;EACdR,MAAAA,KAAK,CAACY,WAAN,GAAoB,cAAcZ,KAAK,CAAC3B,UAAxC;EACD,KAFD,MAEO;EACL2B,MAAAA,KAAK,CAACY,WAAN,GAAoB,UAAUZ,KAAK,CAAC3B,UAApC;EACD;EACF;;EACD,MAAImC,UAAJ,EAAgB;EACdR,IAAAA,KAAK,CAAC3B,UAAN,GAAmB,SAAS2B,KAAK,CAAC3B,UAAlC;EACD;;EACD,SAAO2B,KAAP;EACD,CA/BD;;EAgCA,eAAc,GAAGe,SAAjB;;ECnCA;;;;;;EAOA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAS1B,MAAT,EAAiBC,KAAjB,EAAwB;;EAEzC,MAAID,MAAM,CAACgB,QAAP,CAAgBC,KAApB,EAA2B;EACzB;EACD,GAJwC;;;EAOzC,MAAIjB,MAAM,CAACuB,SAAP,CAAiBN,KAArB,EAA4B;EAC1BjB,IAAAA,MAAM,CAACuB,SAAP,CAAiBI,MAAjB,CAAwB,KAAxB;EACA;EACD,GAVwC;;;EAYzC,MAAI3B,MAAM,CAACX,IAAP,CAAYC,GAAZ,CAAgB,SAAhB,CAAJ,EAAgC;EAC9BU,IAAAA,MAAM,CAACX,IAAP,CAAYsC,MAAZ,CAAmB,KAAnB;EACA;EACD;EACF,CAhBD;;EAiBA,gBAAc,GAAGD,UAAjB;;ECpBA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAASC,EAAT,EAAa;EAC7B,SAAO;EACLC,IAAAA,MAAM,EAAED,EAAE,CAACE,KAAH,CAAS,UAAT,CADH;;EAELf,IAAAA,QAAQ,EAAEa,EAAE,CAACE,KAAH,CAAS,WAAT,CAFL;;EAGLR,IAAAA,SAAS,EAAEM,EAAE,CAACE,KAAH,CAAS,YAAT,CAHN;;EAILC,IAAAA,QAAQ,EAAEH,EAAE,CAACE,KAAH,CAAS,WAAT,CAJL;;EAKL1C,IAAAA,IAAI,EAAEwC,EAAE,CAACE,KAAH,CAAS,OAAT,EAAkBE,GAAlB,CAAsB,0CAAtB;EALD,GAAP;EAOD,CARD;;EAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAASC,GAAT,EAAc;;EAAA,MAExBC,KAFwB;EAAA;EAAA;EAAA;;EAG5B,mBAAYC,IAAZ,EAAkBC,IAAlB,EAAwBrC,KAAxB,EAA+B;EAAA;;EAAA,gFACvBoC,IADuB,EACjBC,IADiB,EACXrC,KADW;EAE9B;;;;EAL2B;EAAA;EAAA,gCAQlB;EACR,YAAIoC,IAAI,GAAG,EAAX;EACA,aAAKnD,OAAL,CAAa,UAAA2C,EAAE,EAAI;EACjB,cAAIU,IAAI,GAAGX,SAAS,CAACC,EAAD,CAAT,CAAcC,MAAzB;;EACA,cAAIS,IAAI,CAACtB,KAAT,EAAgB;EACdoB,YAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAYD,IAAI,CAACF,IAAjB,CAAP;EACD;EACF,SALD;EAMA,eAAO,KAAKI,SAAL,CAAeJ,IAAf,CAAP;EACD;;;;;;EAjB2B;EAAA;EAAA,qCAqBb;EAAA;;EACb,YAAIK,MAAM,GAAG,EAAb;EACA,aAAKxD,OAAL,CAAa,UAAA2C,EAAE,EAAI;EACjB,cAAI7B,MAAM,GAAG4B,SAAS,CAACC,EAAD,CAAtB;EACA,cAAItB,KAAK,GAAGe,WAAS,CAACtB,MAAD,EAAS,KAAI,CAACC,KAAd,CAArB;EACAyC,UAAAA,MAAM,CAACC,IAAP,CAAYpC,KAAZ;EACD,SAJD;EAKA,eAAOmC,MAAP;EACD;;;;;;;;;EA7B2B;EAAA;EAAA,mCAoCf;EACX,eAAO,WAAQ,WAAR,CAAP;EACD;;;EAtC2B;EAAA;EAAA,mCAwCf;EACX,eAAO,KAAKE,IAAL,CAAU,WAAV,CAAP;EACD;;;EA1C2B;EAAA;EAAA,mCA4Cf;EAAA;;;EAEX,aAAKP,IAAL,CAAUnD,OAAV,CAAkB,UAAA2D,CAAC,EAAI;EACrB,cAAIC,GAAG,GAAG,MAAI,CAACL,SAAL,CAAe,CAACI,CAAD,CAAf,CAAV;;EACA,cAAI7C,MAAM,GAAG4B,SAAS,CAACkB,GAAD,CAAtB;;EACApB,UAAAA,YAAU,CAAC1B,MAAD,EAAS8C,GAAG,CAAC7C,KAAb,CAAV;EACD,SAJD;EAKA,eAAO,IAAP;EACD;;;EApD2B;EAAA;EAAA,mCAsDf;EACX,eAAO,KAAK8C,MAAL,CAAY,WAAZ,CAAP;EACD;;;EAxD2B;EAAA;EAAA,oCA0Dd;EACZ,YAAItB,UAAU,GAAG,KAAKxB,KAAL,CAAWwB,UAA5B;EACA,eAAO,KAAKuB,GAAL,CAAS,UAAAnB,EAAE,EAAI;EACpB,cAAIxC,IAAI,GAAGuC,SAAS,CAACC,EAAD,CAAT,CAAcxC,IAAzB;EACA,cAAIE,GAAG,GAAGF,IAAI,CAACG,GAAL,CAAS,QAAT,CAAV;EACA,cAAIyD,IAAI,GAAGxB,UAAU,CAACpB,KAAX,CAAiBd,GAAjB,EAAsBb,SAAjC;;EACA,cAAIuE,IAAJ,EAAU;EACR,gBAAIJ,CAAC,GAAGhB,EAAE,CAACQ,IAAH,CAAQ,CAAR,CAAR,CADQ;;;;EAKR,mBAAOR,EAAP,CALQ;EAMT;;EACD,iBAAOA,EAAP;EACD,SAZM,CAAP;EAaD;;;;;;;;;;;;;;;;EAzE2B;;EAAA;EAAA,IAEVM,GAFU;;EAsF9BA,EAAAA,GAAG,CAACe,SAAJ,CAAc7C,KAAd,GAAsB,UAAS8C,CAAT,EAAY;EAChC,QAAIpB,KAAK,GAAG,KAAKA,KAAL,CAAW,iDAAX,CAAZ,CADgC;;;;;;EAOhCA,IAAAA,KAAK,GAAGA,KAAK,MAAL,CAAS,OAAT,CAAR,CAPgC;;;EAShC,QAAI,OAAOoB,CAAP,KAAa,QAAjB,EAA2B;EACzBpB,MAAAA,KAAK,GAAGA,KAAK,CAACqB,GAAN,CAAUD,CAAV,CAAR;EACD;;EACD,QAAItB,EAAE,GAAG,IAAIO,KAAJ,CAAUL,KAAK,CAACM,IAAhB,EAAsB,IAAtB,EAA4B,KAAKpC,KAAjC,CAAT;EACA,WAAO4B,EAAP;EACD,GAdD;;EAeA,SAAOM,GAAP;EACD,CAtGD;;EAuGA,OAAc,GAAGD,SAAjB;;;;;;;;"}