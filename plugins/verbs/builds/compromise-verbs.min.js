"use strict";let rules={Participle:[{reg:/own$/i,to:"ow"},{reg:/(.)un([g|k])$/i,to:"$1in$2"}],Actor:[{reg:/(er)er$/i,to:"$1"}],PresentTense:[{reg:/(..)(ies)$/i,to:"$1y"},{reg:/(tch|sh)es$/i,to:"$1"},{reg:/(ss|zz)es$/i,to:"$1"},{reg:/([tzlshicgrvdnkmu])es$/i,to:"$1e"},{reg:/(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,to:"$1"},{reg:/(ow)s$/i,to:"$1"},{reg:/(op)s$/i,to:"$1"},{reg:/([eirs])ts$/i,to:"$1t"},{reg:/(ll)s$/i,to:"$1"},{reg:/(el)s$/i,to:"$1"},{reg:/(ip)es$/i,to:"$1e"},{reg:/ss$/i,to:"ss"},{reg:/s$/i,to:""}],Gerund:[{reg:/pping$/i,to:"p"},{reg:/lling$/i,to:"ll"},{reg:/tting$/i,to:"t"},{reg:/dding$/i,to:"d"},{reg:/ssing$/i,to:"ss"},{reg:/(..)gging$/i,to:"$1g"},{reg:/([^aeiou])ying$/i,to:"$1y"},{reg:/([^ae]i.)ing$/i,to:"$1e"},{reg:/(ea.)ing$/i,to:"$1"},{reg:/(u[rtcb]|[bdtpkg]l|n[cg]|a[gdkvtc]|[ua]s|[dr]g|yz|o[rlsp]|cre)ing$/i,to:"$1e"},{reg:/(ch|sh)ing$/i,to:"$1"},{reg:/(..)ing$/i,to:"$1"}],PastTense:[{reg:/(ued)$/i,to:"ue"},{reg:/a([^aeiouy])ed$/i,to:"a$1e"},{reg:/([aeiou]zz)ed$/i,to:"$1"},{reg:/(e|i)lled$/i,to:"$1ll"},{reg:/(.)(sh|ch)ed$/i,to:"$1$2"},{reg:/(tl|gl)ed$/i,to:"$1e"},{reg:/(um?pt?)ed$/i,to:"$1"},{reg:/(ss)ed$/i,to:"$1"},{reg:/pped$/i,to:"p"},{reg:/tted$/i,to:"t"},{reg:/(..)gged$/i,to:"$1g"},{reg:/(..)lked$/i,to:"$1lk"},{reg:/([^aeiouy][aeiou])ked$/i,to:"$1ke"},{reg:/(.[aeiou])led$/i,to:"$1l"},{reg:/(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,to:"$1$2"},{reg:/(.ut)ed$/i,to:"$1e"},{reg:/(.pt)ed$/i,to:"$1"},{reg:/(us)ed$/i,to:"$1e"},{reg:/(..[^aeiouy])ed$/i,to:"$1e"},{reg:/(..)ied$/i,to:"$1y"},{reg:/(.o)ed$/i,to:"$1o"},{reg:/(..i)ed$/i,to:"$1"},{reg:/(.a[^aeiou])ed$/i,to:"$1"},{reg:/([rl])ew$/i,to:"$1ow"},{reg:/([pl])t$/i,to:"$1t"}]};var _rules=rules;let guessVerb={Gerund:["ing"],Actor:["erer"],Infinitive:["ate","ize","tion","rify","then","ress","ify","age","nce","ect","ise","ine","ish","ace","ash","ure","tch","end","ack","and","ute","ade","ock","ite","ase","ose","use","ive","int","nge","lay","est","ain","ant","ent","eed","er","le","own","unk","ung","en"],PastTense:["ed","lt","nt","pt","ew","ld"],PresentTense:["rks","cks","nks","ngs","mps","tes","zes","ers","les","acks","ends","ands","ocks","lays","eads","lls","els","ils","ows","nds","ays","ams","ars","ops","ffs","als","urs","lds","ews","ips","es","ts","ns"]};var _guess=guessVerb=Object.keys(guessVerb).reduce((e,t)=>(guessVerb[t].forEach(r=>e[r]=t),e),{});const pickTense=function(e){if(e.has("#PastTense"))return"PastTense";if(e.has("#Gerund"))return"Gerund";if(e.has("#PresentTense"))return"PresentTense";if(e.has("#Participle"))return"Participle";if(e.has("#Actor"))return"Actor";let t=e.out("normal"),r=t.substr(t.length-3);if(!0===_guess.hasOwnProperty(r))return _guess[r];let i=t.substr(t.length-2);return _guess.hasOwnProperty(!0===i)?_guess[i]:"s"===t.substr(t.length-1)?"PresentTense":null};var pickTense_1=pickTense;const toInfinitive=function(e,t){let r=e.verb,i=r.out("normal");if(r.has("#Infinitive"))return i;if(!0===t.lexicon.hasOwnProperty(i)){let e=t.irregulars.verbs,r=Object.keys(e);for(let t=0;t<r.length;t++){let s=Object.keys(e[r[t]]);for(let n=0;n<s.length;n++)if(i===e[r[t]][s[n]])return r[t]}}let s=pickTense_1(r);if(s&&_rules[s])for(let e=0;e<_rules[s].length;e++){const t=_rules[s][e];if(!0===t.reg.test(i))return i.replace(t.reg,t.to)}return i};var toInfinitive_1=toInfinitive;const toBe=e=>{let t={PastTense:"was",PresentTense:"is",FutureTense:"will be",Infinitive:"is",Gerund:"being",Actor:"",PerfectTense:"been",Pluperfect:"been"};return e.negative.found&&(t.PastTense+=" not",t.PresentTense+=" not",t.FutureTense="will not be",t.Infinitive+=" not",t.PerfectTense="not "+t.PerfectTense,t.Pluperfect="not "+t.Pluperfect,t.Gerund="not "+t.Gerund),t};var toBe_1=toBe;const conjugate=function(e,t){let r=e.verb;if(r.has("#Copula")||"be"===r.out("normal")&&e.auxiliary.has("will"))return toBe_1(e);let i=toInfinitive_1(e,t),s=t.transforms.verbs(i,t);s.Infinitive=i;const n=e.negative.found;return n&&(s.PastTense="did not "+s.Infinitive,s.PresentTense="does not "+s.Infinitive,s.Gerund="not "+s.Gerund),s.FutureTense||(s.FutureTense=n?"will not "+s.Infinitive:"will "+s.Infinitive),n&&(s.Infinitive="not "+s.Infinitive),s};var conjugate_1=conjugate;const toNegative=function(e,t){e.negative.found||(e.auxiliary.found?e.auxiliary.append("not"):e.verb.has("#Copula")&&e.verb.append("not"))};var toNegative_1=toNegative;const parseVerb=function(e){return{adverb:e.match("#Adverb+"),negative:e.match("#Negative"),auxiliary:e.match("#Auxiliary"),particle:e.match("#Particle"),verb:e.match("#Verb").not("(#Adverb|#Negative|#Auxiliary|#Particle)")}},addMethod=function(e){class t extends e{constructor(e,t,r){super(e,t,r)}adverbs(){let e=[];return this.forEach(t=>{let r=parseVerb(t).adverb;r.found&&(e=e.concat(r.list))}),this.buildFrom(e)}conjugations(){let e=[];return this.forEach(t=>{let r=parseVerb(t),i=conjugate_1(r,this.world);e.push(i)}),e}isNegative(){return this.if("#Negative")}isPositive(){return this.ifNo("#Negative")}toNegative(){return this.list.forEach(e=>{let t=this.buildFrom([e]),r=parseVerb(t);toNegative_1(r,t.world)}),this}toPositive(){return this.remove("#Negative")}toPastTense(){let e=this.world.transforms;return this.map(t=>{let r=parseVerb(t).verb.out("normal");if(e.verbs(r).PastTense){t.list[0];return t}return t})}}return e.prototype.verbs=function(e){let r=this.match("(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+");return r=r.if("#Verb"),"number"==typeof e&&(r=r.get(e)),new t(r.list,this,this.world)},e};var src=addMethod;module.exports=src;
