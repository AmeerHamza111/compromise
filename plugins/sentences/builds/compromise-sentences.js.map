{"version":3,"file":"compromise-sentences.js","sources":["../src/mainClause.js","../src/parse.js","../src/index.js"],"sourcesContent":["// if a clause starts with these, it's not a main clause\nconst subordinate = `(after|although|as|because|before|if|since|than|that|though|when|whenever|where|whereas|wherever|whether|while|why|unless|until|once)`\nconst relative = `(that|which|whichever|who|whoever|whom|whose|whomever)`\n\n//try to remove secondary clauses\nconst mainClause = function(og) {\n  let m = og.clone(true)\n  if (m.length === 1) {\n    return m\n  }\n  // if there's no verb?\n  m = m.if('#Verb')\n  if (m.length === 1) {\n    return m\n  }\n  // this is a signal for subordinate-clauses\n  m = m.ifNo(subordinate)\n  m = m.ifNo('^even (if|though)')\n  m = m.ifNo('^so that')\n  m = m.ifNo('^rather than')\n  m = m.ifNo('^provided that')\n  if (m.length === 1) {\n    return m\n  }\n  // relative clauses\n  m = m.ifNo(relative)\n  if (m.length === 1) {\n    return m\n  }\n\n  m = m.ifNo('(despite|during|before|through|throughout)')\n  if (m.length === 1) {\n    return m\n  }\n  // did we go too far?\n  if (m.length === 0) {\n    m = og\n  }\n  // choose the first one?\n  return m.eq(0)\n}\nmodule.exports = mainClause\n","const mainClause = require('./mainClause')\n\nconst parse = function(doc) {\n  let clauses = doc.clauses()\n  let main = mainClause(clauses)\n  let nouns = main.match('#Determiner? (#Noun|#Adjective)+').if('#Noun')\n  let verb = main.match('#Verb+').eq(0)\n  return {\n    subject: nouns.eq(0),\n    verb: verb,\n    object: verb.lookAhead('.*'),\n  }\n}\nmodule.exports = parse\n","const parse = require('./parse')\n\nconst addMethod = function(Doc) {\n  /**  */\n  class Sentences extends Doc {\n    constructor(list, from, world) {\n      super(list, from, world)\n    }\n\n    /** overload the original json with noun information */\n    json(options) {\n      let n = null\n      if (typeof options === 'number') {\n        n = options\n        options = null\n      }\n      options = options || { text: true, normal: true, trim: true, terms: true }\n      let res = []\n      this.forEach(doc => {\n        let json = doc.json(options)[0]\n        let obj = parse(doc)\n        json.subject = obj.subject.json(options)[0]\n        json.verb = obj.verb.json(options)[0]\n        json.object = obj.object.json(options)[0]\n        res.push(json)\n      })\n      if (n !== null) {\n        return res[n]\n      }\n      return res\n    }\n\n    /** the main noun of the sentence */\n    subjects() {\n      return this.map(doc => {\n        let res = parse(doc)\n        return res.subject\n      })\n    }\n\n    toPastTense() {\n      this.forEach(doc => {\n        let res = parse(doc)\n        doc.match(res.verb).replaceWith('was')\n        // return doc\n      })\n      return this\n    }\n    toPresentTense() {}\n    toFutureTense() {}\n    toContinuous() {}\n\n    toNegative() {}\n    toPositive() {}\n\n    isPassive() {\n      return this.has('was #Adverb? #PastTense #Adverb? by') //haha\n    }\n    /** return sentences ending with '?' */\n    isQuestion() {\n      return this.filter(doc => {\n        let term = doc.lastTerm().termList(0)\n        return term.hasPost('?')\n      })\n    }\n    /** return sentences ending with '!' */\n    isExclamation() {\n      return this.filter(doc => {\n        let term = doc.lastTerm().termList(0)\n        return term.hasPost('!')\n      })\n    }\n    /** return sentences with neither a question or an exclamation */\n    isStatement() {\n      return this.filter(doc => {\n        let term = doc.lastTerm().termList(0)\n        return !term.hasPost('?') && !term.hasPost('!')\n      })\n    }\n\n    /** add a word to the start of this sentence */\n    prepend(str) {\n      this.forEach(doc => {\n        // repair the titlecase\n        let firstTerms = doc.match('^.')\n        firstTerms.not('#ProperNoun').toLowerCase()\n        // actually add the word\n        firstTerms.prepend(str)\n        // add a titlecase\n        firstTerms.terms(0).toTitleCase()\n      })\n    }\n\n    /** add a word to the end of this sentence */\n    append(str) {\n      let hasEnd = /[.?!]\\s*$/.test(str)\n      this.forEach(doc => {\n        let end = doc.match('.$')\n        let lastTerm = end.termList(0)\n        let punct = lastTerm.post\n        if (hasEnd === true) {\n          punct = ''\n        }\n        // add punctuation to the end\n        end.append(str + punct)\n        // remove punctuation from the former last-term\n        lastTerm.post = ' '\n      })\n    }\n\n    toExclamation() {}\n    toQuestion() {}\n    toStatement() {}\n  }\n\n  Doc.prototype.sentences = function(n) {\n    let match = this.all()\n\n    //grab (n)th result\n    if (typeof n === 'number') {\n      match = match.get(n)\n    }\n    return new Sentences(match.list, this, this.world)\n  }\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["subordinate","relative","mainClause","og","m","clone","length","ifNo","eq","parse","doc","clauses","main","nouns","match","verb","subject","object","lookAhead","addMethod","Doc","Sentences","list","from","world","options","n","text","normal","trim","terms","res","forEach","json","obj","push","map","replaceWith","has","filter","term","lastTerm","termList","hasPost","str","firstTerms","not","toLowerCase","prepend","toTitleCase","hasEnd","test","end","punct","post","append","prototype","sentences","all","get"],"mappings":"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"}